//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start
Функция СведенияОВнешнейОбработке() Экспорт 
	
	ИмяОтчетаОбработки = ЭтотОбъект.Метаданные().Имя; 
	Синоним = ЭтотОбъект.Метаданные().Синоним + " " + ЭтотОбъект.Метаданные().Комментарий; 
	Синоним = ?(ЗначениеЗаполнено(Синоним), Синоним, ИмяОтчетаОбработки);
	Автор = Символы.ПС + 
		"by Ilya Kosarev (kimkarus)" + Символы.ПС + 
		"Авторское право на основе свидетельства № 2024668582 от 08.08.2024, ФИПС (Роспатент)" + Символы.ПС +
		"В реестре российского ПО № 3263396: https://reestr.digital.gov.ru/reestr/3263396/"; 
		
	РегистрационныеДанные = Новый Структура();
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Наименование", Синоним);
	РегистрационныеДанные.Вставить("Версия", "1.3.8");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Информация", "Обработка "+ Синоним + Автор); 
	РегистрационныеДанные.Вставить("ВерсияБСП", "1.2.1.4");
	//
	КоличествоНастроек = 10;
	//
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, Синоним +" ручное", "Синхронизация1C_ClickHouse", "ОткрытиеФормы", Истина);
	ДобавитьКоманду(ТаблицаКоманд, "Фоновая по умолчанию", "Синхронизация1C_ClickHouseНаСервере_ФоноваяПоУмолчанию" , "ВызовСерверногоМетода");
	ДобавитьКоманду(ТаблицаКоманд, "Фоновая выгрузка (все настройки)", "Синхронизация1C_ВсеНастройкиЗапросов_ФоноваяПоУмолчанию" , "ВызовСерверногоМетода");
	Для Счетчик = 1 По КоличествоНастроек Цикл
		ДобавитьКоманду(ТаблицаКоманд, "Фоновая выгрузка: настройка запроса № - " + Счетчик, "Синхронизация1C_НастройкаЗапроса_" + Счетчик,"ВызовСерверногоМетода");
	КонецЦикла;
	// Сохраним таблицу команд в параметры регистрации обработки
	РегистрационныеДанные.Вставить("Команды", ТаблицаКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start	 
Функция ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды = Неопределено) Экспорт
	
	ВыполнитьКомандуСервер(ИдентификаторКоманды);
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-05-2025 19:30 start	 
Процедура ВыполнитьКомандуСервер(ИдентификаторКоманды) Экспорт
	
	МассивПодстроки = СтрРазделить(ИдентификаторКоманды, "_");
	//
	Если МассивПодстроки.Количество() < 1 Тогда
		Возврат;	
	КонецЕсли;
	ПараметрыОбработки = ЗаполнитьПараметры();
	ПараметрыОбработкиСохраненные = ПолучитьСохраненныеДанные("Фоновый").Объект;
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ПараметрыОбработкиСохраненные);
	Если МассивПодстроки[1] = "ClickHouseНаСервере" Тогда  
		Если МассивПодстроки[2] = "ФоноваяПоУмолчанию" Тогда
			ПараметрыОбработки.Вставить("ТипКоманды", "ФоноваяПоУмолчанию");	
		КонецЕсли;
		ВыгрузитьДанныеВБазуДанныхНаСервере(ПараметрыОбработки, МассивПодстроки[2]);			
	ИначеЕсли МассивПодстроки[1] = "НастройкаЗапроса" Тогда
		ПараметрыОбработки.Вставить("ТипКоманды", "НастройкаЗапроса");
		Если ПараметрыОбработкиСохраненные.НастройкиЗапросов.Количество() > 0 Тогда
			НомерНастройки = Число(МассивПодстроки[2]);
			Если ПараметрыОбработкиСохраненные.НастройкиЗапросов.Количество() >= НомерНастройки	Тогда
				СтрокаТЧ = ПараметрыОбработкиСохраненные.НастройкиЗапросов[НомерНастройки - 1];
				ЗаполнитьЗначенияСвойств(ПараметрыОбработки, СтрокаТЧ);
				ВыгрузитьДанныеВБазуДанныхНаСервере(ПараметрыОбработки, "НастройкаЗапроса");	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли МассивПодстроки[1] = "ВсеНастройкиЗапросов" Тогда
		Если МассивПодстроки[2] = "ФоноваяПоУмолчанию" Тогда
			ПараметрыОбработки.Вставить("ТипКоманды", "ФоноваяПоУмолчанию");	
		КонецЕсли;
		Если ПараметрыОбработкиСохраненные.НастройкиЗапросов.Количество() > 0 Тогда
			Для каждого СтрокаТЧ из ПараметрыОбработкиСохраненные.НастройкиЗапросов Цикл
				ЗаполнитьЗначенияСвойств(ПараметрыОбработки, СтрокаТЧ);
				ВыгрузитьДанныеВБазуДанныхНаСервере(ПараметрыОбработки, МассивПодстроки[2]);
			КонецЦикла;	
		КонецЕсли;	
	Иначе
	КонецЕсли;
	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-05-2025 19:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start
Функция ЗаполнитьПараметры() Экспорт
	ТекущаяДата = ТекущаяДата();
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ИспользоватьСтарыйМетодФоновыхЗаданий", Ложь);
	СтруктураПараметры.Вставить("ПроверитьТаблицу", Ложь);
	СтруктураПараметры.Вставить("ТипКоманды", "");
	//База
	СтруктураПараметры.Вставить("Адрес", "IP");
	СтруктураПараметры.Вставить("Порт", 8123);
	СтруктураПараметры.Вставить("ЭтоЗащищенноеСоединение", Ложь);
	СтруктураПараметры.Вставить("ПутьДоСертификата", "");																 
	СтруктураПараметры.Вставить("Логин", "default");
	СтруктураПараметры.Вставить("Пароль", "password");
	СтруктураПараметры.Вставить("ИмяБазы", "db_name");																			  
	//ClickHouseDB, PostgreSQ, MySQL, REST, Local, Google Sheets
	СтруктураПараметры.Вставить("ТипБазы", "ClickHouseDB");
	СтруктураПараметры.Вставить("ФорматДанных", "SQL");
	СтруктураПараметры.Вставить("ИмяТаблицы", "ИмяТаблицы");
	СтруктураПараметры.Вставить("ИмяПользователя", "Фоновый");
	СтруктураПараметры.Вставить("ВключитьПараметрыЗапросаREST", Истина);	
	//НастройкаЗапроса	
	СтруктураПараметры.Вставить("ДатаНачала", ДатаДнейНазад(ТекущаяДата, 1));
	СтруктураПараметры.Вставить("ДатаОкончания", КонецДня(ТекущаяДата));
	//
	СтруктураПараметры.Вставить("ЭтоПоЗапросу", Ложь);
	СтруктураПараметры.Вставить("ЭтоТекущаяДата", Ложь);
	СтруктураПараметры.Вставить("ТекстЗапроса", "");
	СтруктураПараметры.Вставить("Периодичность", "День");
	СтруктураПараметры.Вставить("ИспользоватьПериодВКлюче", Истина);
	СтруктураПараметры.Вставить("ИспользоватьДополнительныеКлючи", Ложь);
	СтруктураПараметры.Вставить("ИспользоватьТолькоДополнительныеКлючи", Ложь);
	СтруктураПараметры.Вставить("ОднимФайлом", Истина);
	СтруктураПараметры.Вставить("КоличествоДнейНазад", 1);
	СтруктураПараметры.Вставить("ОтключитьКоличествоДнейНазад", Ложь);
	СтруктураПараметры.Вставить("КоличествоВПортиции", 1000);
	СтруктураПараметры.Вставить("КаждаяПортицияВСвоемФоне", Ложь);
	//
	СтруктураПараметры.Вставить("КомандыФоновые", Новый ТаблицаЗначений());
	СтруктураПараметры.Вставить("МассивДополнительныхКлючей", ПолучитьМассивДополнительныхКлючей());
	//
	СтруктураПараметры.Вставить("АбсолютныйПутьPython", "C:\Program Files\Python38\python.exe");
	Возврат СтруктураПараметры;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start										   
Функция ПолучитьТаблицуКоманд()
 
     Команды = Новый ТаблицаЗначений;
     Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
     Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
     Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
     Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
     Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
     Возврат Команды;
 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end
 
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start																					 
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
 
      НоваяКоманда = ТаблицаКоманд.Добавить();
      НоваяКоманда.Представление = Представление;
      НоваяКоманда.Идентификатор = Идентификатор;
      НоваяКоманда.Использование = Использование;
      НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
      НоваяКоманда.Модификатор = Модификатор;
 
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 start 
Процедура ВыгрузитьДанныеВБазуДанныхНаСервере(Параметры, ТипКоманды = "") Экспорт
	
	Если Параметры.ТипБазы <> "REST"
		И Параметры.ТипБазы <> "Local"
		И Параметры.ТипБазы <> "Google Sheets" Тогда
		Если Не ЕстьБазаВ(Параметры.ИмяБазы, Параметры) Тогда
			ТекстЗапроса = ТекстЗапросаСозданиеБазыДанных(Параметры);
			БазаСоздана = ВыполнитьЗапросPOST(ТекстЗапроса, Параметры);
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("ИмяТаблицыТранслит", Транслит(Параметры.ИмяТаблицы));
	Если Параметры.ЭтоТекущаяДата Тогда
		ТекущаяДата = ТекущаяДата();
		Параметры.Вставить("ДатаНачала", ДатаДнейНазад(ТекущаяДата, Параметры.КоличествоДнейНазад));
		Параметры.Вставить("ДатаОкончания", КонецДня(ТекущаяДата));
	КонецЕсли;		  
	//
	ПараметрыЗапроса = ПолучитьСтруктуруПараметровЗапроса(Параметры);
	//
	Если Параметры.ТипБазы <> "REST"
		И Параметры.ТипБазы <> "Local"
		И Параметры.ТипБазы <> "Google Sheets" Тогда
		Если Не ЕстьТаблицаВ(Параметры.ИмяТаблицы, Параметры) Тогда
			ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанных(Параметры, ПараметрыЗапроса.ПараметрыМакета, ПараметрыЗапроса.ПоляНабораДанных, ПараметрыЗапроса.МассивПолейКлючейПериод, ПараметрыЗапроса.ДополнительныеПараметры);
			ТаблицаСоздана = ВыполнитьЗапросPOST(ТекстЗапроса, Параметры);
		КонецЕсли;
	КонецЕсли;
	Если Параметры.ТипБазы <> "REST"
		И Параметры.ТипБазы <> "Local"
		И Параметры.ТипБазы <> "Google Sheets" Тогда
		ОписаниеТаблицыБД = ОписаниеТаблицыВ(Параметры.ИмяТаблицы, Параметры);
		Параметры.Вставить("ОписаниеТаблицыБД", ОписаниеТаблицыБД);
	КонецЕсли;
	Запрос = УстановитьПараметрыЗапросаПоУмолчанию(Параметры, ПараметрыЗапроса);
	Параметры.Вставить("ИдентификаторВыгрузки", Новый УникальныйИдентификатор);
	ВыгрузитьДанныеВБазуДанных_Запрос_НаСервере(Запрос, Параметры, ПараметрыЗапроса);	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 end																																							  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 04-08-2025 9:30 start
Функция ДатаСУчетомПериодичности(_Дата, Периодичность, ЭтоНачало = Истина)
	Если Периодичность = "Месяц" Тогда
		Если ЭтоНачало Тогда
			Возврат НачалоМесяца(_Дата);
		Иначе
			Возврат КонецМесяца(_Дата);
		КонецЕсли;
	ИначеЕсли Периодичность = "День" Тогда
		Если ЭтоНачало Тогда
			Возврат НачалоДня(_Дата);
		Иначе
			Возврат КонецДня(_Дата);
		КонецЕсли;
	Иначе
		Если ЭтоНачало Тогда
			Возврат НачалоМесяца(_Дата);
		Иначе
			Возврат КонецМесяца(_Дата);
		КонецЕсли;
	КонецЕсли;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 04-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 start
Функция ПолучитьОсобыеПараметры(ДополнительныеПараметры, ПараметрыМакета)
	СтруктураПараметров = Новый Структура("Периодичность, ЕстьОсобоеПолеДатыОкончениеПериода");
	
	СтруктураПараметров.Вставить("Периодичность", ДополнительныеПараметры.Периодичность);
	СтруктураПараметров.Вставить("ЕстьОсобоеПолеДатыОкончениеПериода", ЕстьОсобоеПолеДатыОкончениеПериода(ПараметрыМакета));
	СтруктураПараметров.Вставить("ОтключитьКоличествоДнейНазад", ДополнительныеПараметры.ОтключитьКоличествоДнейНазад);
	
	Возврат СтруктураПараметров;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 end
	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 start
Функция ВернутьМассивОсобыхПолейДатыОкончениеПериода()
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("НачалоПериодаРегистрации");
	МассивПолей.Добавить("ОкончаниеПериодаРегистрации");
	МассивПолей.Добавить("НачалоПериодаОказанияУслуг");
	МассивПолей.Добавить("ОкончаниеПериодаОказанияУслуг");
	МассивПолей.Добавить("НачалоПериодаОтнесенияУслуг");
	МассивПолей.Добавить("ОкончаниеПериодаОтнесенияУслуг");
	Возврат МассивПолей;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 start
Функция ЕстьОсобоеПолеДатыОкончениеПериода(ПараметрыМакета)
	МассивПолей = ВернутьМассивОсобыхПолейДатыОкончениеПериода();
	
	Для каждого СтрокаПараметра из ПараметрыМакета Цикл
		Для каждого СтрокаМ из МассивПолей Цикл
			Если СтрокаМ = СтрокаПараметра.Имя Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 04-08-2025 9:30 start									   
Функция ВернутьДату_Запрос_НаСервере(ИмяПоля, ПериодОтчета, НоваяДатаОтчета, ДатаОкончанияОтчета, ОсобыеПараметры)
	
	Если ИмяПоля = "ДатаОтчетаСутки1" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "ДатаОтчетаСутки2" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если ИмяПоля = "Дата1" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "Дата2" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если ИмяПоля = "ДатаНачала" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "ДатаОкончания" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если ИмяПоля = "Период" Тогда
		Если ОсобыеПараметры.ЕстьОсобоеПолеДатыОкончениеПериода Тогда
			Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Ложь);
		КонецЕсли;
		Возврат НачалоДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "НачалоПериодаРегистрации" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "ОкончаниеПериодаРегистрации" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	//
	Если ИмяПоля = "НачалоПериодаОказанияУслуг" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "ОкончаниеПериодаОказанияУслуг" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	//
	Если ИмяПоля = "НачалоПериодаОтнесенияУслуг" Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если ИмяПоля = "ОкончаниеПериодаОтнесенияУслуг" Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчета" Тогда
		Возврат ПериодОтчета;
	КонецЕсли;
	Если ИмяПоля = "ДатаОтчетаВывод" Тогда
		Возврат Формат(НачалоДня(ПериодОтчета), "ДФ=dd.MM.yyyy");
	КонецЕсли;
	Если ИмяПоля = "ДатаОтчета" Тогда
		Возврат НачалоДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ПериодОтчета" Тогда
		Возврат НачалоДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ПериодДень1" Тогда
		Возврат НачалоДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ПериодДень2" Тогда
		Возврат КонецДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "КонецОтчета" Тогда
		Возврат НачалоДня(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ДатаПланНачало" Тогда
		Возврат НачалоМесяца(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ДатаПланКонец" Тогда
		Возврат КонецДня(ДатаДнейНазад(ПериодОтчета, 1));
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетБаланс" Тогда
		Возврат КонецДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДата" Тогда
		Возврат НачалоДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетЗаказ" Тогда
		Возврат КонецДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетПоОперациямОтбор" Тогда
		Возврат НачалоДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетСводноОтправление3" Тогда
		Возврат КонецДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетСводноОтправлениеТолько" Тогда
		Возврат КонецДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ТекущаяДатаОтчетСводноОтправлениеНазначение3" Тогда
		Возврат КонецДня(НоваяДатаОтчета);
	КонецЕсли;
	Если ИмяПоля = "ДатаДислокацияПогружено1" Тогда
		Возврат НачалоМесяца(ПериодОтчета);
	КонецЕсли;
	Если ИмяПоля = "ДатаДислокацияПогружено2" Тогда
		Возврат КонецМесяца(ПериодОтчета);
	КонецЕсли;
	
	Если СтрНайти(ИмяПоля, "Начало") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Конец") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Дата1") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Начало") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Дата2") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Конец") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(?(ОсобыеПараметры.ОтключитьКоличествоДнейНазад, ДатаОкончанияОтчета, ПериодОтчета), ОсобыеПараметры.Периодичность, Ложь);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Период") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
	Если СтрНайти(ИмяПоля, "Текущая") > 0 Тогда
		Возврат ДатаСУчетомПериодичности(ПериодОтчета, ОсобыеПараметры.Периодичность, Истина);
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 04-08-2025 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-08-2024 19:30 start
Функция ПолучитьСхемуКомпановкиДанныхПоЗапросу(ТекстЗапроса)
	СКД = СоздатьСхемуКомпоновкиДанных(ТекстЗапроса);

	Возврат СКД;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-08-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-08-2024 19:30 start
Функция СоздатьСхемуКомпоновкиДанных(ТекстЗапроса, СтруктураРесурсов = Неопределено, АвтоЗаполнениеДоступныхПолей = Истина, ИмяСтандартногоМакетаОформления = "")
	СКД = Новый СхемаКомпоновкиДанных;
	Запрос = Новый Запрос(ТекстЗапроса);
	НаборДанных = Запрос;
	ЗначениеТекущаяДата = ТекущаяДата();
	// Заполнение основных данных схемы
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";

	Если ТипЗнч(НаборДанных) = Тип("Строка") 
		ИЛИ	ТипЗнч(НаборДанных) = Тип("Запрос") Тогда
		//
		ТекущийНаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		ТекущийНаборДанных.Имя                          = "ОсновнойНабор";
		ТекущийНаборДанных.Запрос                       = ?(ТипЗнч(НаборДанных) = Тип("Строка"), НаборДанных, НаборДанных.Текст);
		ТекущийНаборДанных.ИсточникДанных               = "ИсточникДанных";
		ТекущийНаборДанных.АвтоЗаполнениеДоступныхПолей = АвтоЗаполнениеДоступныхПолей;
		//
		ТипНабора = "Запрос";
	ИначеЕсли ТипЗнч(НаборДанных) = Тип("ТаблицаЗначений")
	    ИЛИ ТипЗнч(НаборДанных) = Тип("ДеревоЗначений") Тогда
		//
		ТекущийНаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		ТекущийНаборДанных.Имя            = "ОсновнойНабор";
		ТекущийНаборДанных.ИмяОбъекта     = "ТаблицаИсточник"; // связывание с внешними данными идёт именно по нему
		ТекущийНаборДанных.ИсточникДанных = "ИсточникДанных";
		//
		ТипНабора = "Объект";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;

	// Создание структуры.
	// Группировка, детальные записи и автовыбранное поле
	Группировка = НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование = Истина;

	АвтоПоле = Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;

	КоллекцияКолонок = Новый ТаблицаЗначений;
	КоллекцияКолонок.Колонки.Добавить("Имя");
	КоллекцияКолонок.Колонки.Добавить("ТипЗначения");
	КоллекцияКолонок.Колонки.Добавить("Заголовок");

	Если ТипНабора = "Запрос" Тогда
		ПостроительЗапроса = Новый ПостроительЗапроса;
		Если ТипЗнч(НаборДанных) = Тип("Строка") Тогда
			ПостроительЗапроса.Текст = СокрЛП(НаборДанных);
		Иначе
			ПостроительЗапроса.Текст = СокрЛП(НаборДанных.Текст);
		КонецЕсли;
		ПостроительЗапроса.ЗаполнитьНастройки();

		Для Каждого ПолеОтбора Из ПостроительЗапроса.ВыбранныеПоля Цикл
			НоваяКолонка = КоллекцияКолонок.Добавить();
			НоваяКолонка.Имя         = ПолеОтбора.Имя;
			НоваяКолонка.ТипЗначения = ПостроительЗапроса.ДоступныеПоля[ПолеОтбора.ПутьКДанным].ТипЗначения;
			НоваяКолонка.Заголовок   = ПолеОтбора.Представление
		КонецЦикла;
	ИначеЕсли ТипНабора = "Объект" Тогда
		Для Каждого Колонка Из НаборДанных.Колонки Цикл
			НоваяКолонка = КоллекцияКолонок.Добавить();
			НоваяКолонка.Имя = Колонка.Имя;
			НоваяКолонка.ТипЗначения = Колонка.ТипЗначения;
			НоваяКолонка.Заголовок = Колонка.Имя;
		КонецЦикла;
	КонецЕсли;

	// Добавление ресурсов
	Если ТипЗнч(СтруктураРесурсов) = Тип("Структура") Тогда
		Для Каждого ЭлСтруктуры Из СтруктураРесурсов Цикл
			// Проверка, а Существует ли поле ресурса среди полей набора
			Если КоллекцияКолонок.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				// Проверка на правильность указания агрегатной функции
				Если      ЭлСтруктуры.Значение = "Сумма" ИЛИ
				          ЭлСтруктуры.Значение = "Среднее" ИЛИ
				          ЭлСтруктуры.Значение = "Максимум" ИЛИ
				          ЭлСтруктуры.Значение = "Минимум" ИЛИ
				          ЭлСтруктуры.Значение = "Количество" Тогда
					ПолеРесурса             = СКД.ПоляИтога.Добавить();
					ПолеРесурса.ПутьКДанным = ЭлСтруктуры.Ключ;
					ПолеРесурса.Выражение   = ЭлСтруктуры.Значение + "(" + ЭлСтруктуры.Ключ + ")";
				ИначеЕсли ЭлСтруктуры.Значение = "КоличествоРазличные" Тогда
					ПолеРесурса             = СКД.ПоляИтога.Добавить();
					ПолеРесурса.ПутьКДанным = ЭлСтруктуры.Ключ;
					ПолеРесурса.Выражение   = "Количество(Различные " + ЭлСтруктуры.Ключ + ")";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Добавление параметров
	ПараметрыЗапросТЗ = Запрос.НайтиПараметры();
	
	Для каждого СтрокаТЗ Из ПараметрыЗапросТЗ Цикл
		Параметр = СКД.Параметры.Добавить();
		Параметр.Имя = СтрокаТЗ.Имя;
		Если СтрНайти(Параметр.Имя, "Дата") > 0 Тогда
			Параметр.ТипЗначения = Новый ОписаниеТипов("Дата");
			Параметр.Значение = ЗначениеТекущаяДата;
		КонецЕсли;
	КонецЦикла;	
	// Добавление полей в набор
	Для Каждого НоваяКолонка Из КоллекцияКолонок Цикл
		ПолеНабора = ТекущийНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.Заголовок   = СокрЛП(НоваяКолонка.Заголовок);
		ПолеНабора.Поле        = СокрЛП(НоваяКолонка.Имя);
		ПолеНабора.ПутьКДанным = СокрЛП(НоваяКолонка.Имя);

		// Удалим Неопределено и NULL
		Массив = Новый Массив;
		Для Каждого ТекущийТип Из НоваяКолонка.ТипЗначения.Типы() Цикл
			Если ТекущийТип = Тип("Неопределено") ИЛИ ТекущийТип = Тип("NULL") ИЛИ
			     ТекущийТип = Неопределено ИЛИ ТекущийТип = Null Тогда
				Продолжить;
			КонецЕсли;
			Массив.Добавить(ТекущийТип);
		КонецЦикла;
		ПолеНабора.ТипЗначения = Новый ОписаниеТипов(Массив, НоваяКолонка.ТипЗначения.КвалификаторыЧисла,
		                                             НоваяКолонка.ТипЗначения.КвалификаторыСтроки,
		                                             НоваяКолонка.ТипЗначения.КвалификаторыДаты);

		ВыбранноеПолеКомпоновкиДанных = НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПолеКомпоновкиДанных.Поле          = Новый ПолеКомпоновкиДанных(ПолеНабора.ПутьКДанным);
		ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
	КонецЦикла;

	// Оформление
	Если не ПустаяСтрока(ИмяСтандартногоМакетаОформления) Тогда
		ЗначениеПараметраВывода = НастройкиПоУмолчанию.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МакетОформления"));
		ЗначениеПараметраВывода.Значение      = ИмяСтандартногоМакетаОформления;
		ЗначениеПараметраВывода.Использование = Истина;
	КонецЕсли;

	Возврат СКД;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-08-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start			   
Функция ПолучитьСтруктуруПараметровЗапроса(Параметры) Экспорт
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура;
	
	Если Параметры.ЭтоПоЗапросу Тогда
		СхемаКомпоновкиДанных = ПолучитьСхемуКомпановкиДанныхПоЗапросу(Параметры.ТекстЗапроса);
	ИначеЕсли Не Параметры.ЭтоПоЗапросу Тогда
		Если Параметры.ИмяТаблицы = "ФоноваяПоУмолчанию" Тогда
			СхемаКомпоновкиДанных = ПолучитьСхемуКомпановкиДанныхПоЗапросу(Параметры.ТекстЗапроса);
		ИначеЕсли Параметры.ИмяПользователя = "Фоновый"
			И Параметры.ИмяТаблицы <> "ФоноваяПоУмолчанию" Тогда
			СхемаКомпоновкиДанных = ПолучитьСхемуКомпановкиДанныхПоЗапросу(Параметры.ТекстЗапроса);
		Иначе
			СхемаКомпоновкиДанных = ПолучитьМакет("Запрос" + Параметры.ИмяТаблицы);
		КонецЕсли
	Иначе
		СхемаКомпоновкиДанных = ПолучитьМакет("Запрос" + Параметры.ИмяТаблицы);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	ПараметрыМакета = СхемаКомпоновкиДанных.Параметры;
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	//
	ДополнительныеПараметры.Вставить("ИспользоватьПериодВКлюче", ПолучитьПараметрМакетаИПараметровПоИмени("ИспользоватьПериодВКлюче", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("КоличествоВПортиции", ПолучитьПараметрМакетаИПараметровПоИмени("КоличествоВПортиции", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("ОднимФайлом", ПолучитьПараметрМакетаИПараметровПоИмени("ОднимФайлом", ПараметрыМакета, Параметры));
	Если Параметры.ТипБазы = "Google Sheets" Тогда
		ДополнительныеПараметры.Вставить("ОднимФайлом", Истина);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ПроверитьТаблицу", ПолучитьПараметрМакетаИПараметровПоИмени("ПроверитьТаблицу", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("СоздаватьНесуществующиеПоляВБД", ПолучитьПараметрМакетаИПараметровПоИмени("СоздаватьНесуществующиеПоляВБД", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("КаждаяПортицияВСвоемФоне", ПолучитьПараметрМакетаИПараметровПоИмени("КаждаяПортицияВСвоемФоне", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("Периодичность", ПолучитьПараметрМакетаИПараметровПоИмени("Периодичность", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("ТипБазы", Параметры.ТипБазы);
	ДополнительныеПараметры.Вставить("ФорматДанных", ПолучитьПараметрМакетаИПараметровПоИмени("ФорматДанных", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("ЭтоШапкаПерваяСтрока", Ложь);
	Если ДополнительныеПараметры.ФорматДанных = "CSV_WH"
		ИЛИ ДополнительныеПараметры.ФорматДанных = "XLS"
		ИЛИ ДополнительныеПараметры.ФорматДанных = "XLSX" Тогда
		ДополнительныеПараметры.Вставить("ЭтоШапкаПерваяСтрока", Истина);	
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ЗначениеВКовычки", Истина);
	Если ДополнительныеПараметры.ТипБазы = "REST"
		ИЛИ ДополнительныеПараметры.ТипБазы = "Local"
		ИЛИ ДополнительныеПараметры.ТипБазы = "Google Sheets" Тогда
		ДополнительныеПараметры.Вставить("ЗначениеВКовычки", Ложь);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ИспользоватьДополнительныеКлючи", ПолучитьПараметрМакетаИПараметровПоИмени("ИспользоватьДополнительныеКлючи", ПараметрыМакета, Параметры));
	ДополнительныеПараметры.Вставить("ИспользоватьТолькоДополнительныеКлючи", ПолучитьПараметрМакетаИПараметровПоИмени("ИспользоватьТолькоДополнительныеКлючи", ПараметрыМакета, Параметры));
	//
	МассивПолей = ВернутьМассивПорядокПериодИзНабораДанных(ПоляНабораДанных, ДополнительныеПараметры);		  
	МассивПолейКлючейПериод = ВернутьМассивПолейКлючейПериодИзНабораДанных(ПоляНабораДанных, ДополнительныеПараметры);
	Если НачалоДня(Параметры.ДатаНачала) <> НачалоДня(Параметры.ДатаОкончания) Тогда
		ДополнительныеПараметры.Вставить("КоличествоДнейНазад", РозностьВДнях(Параметры.ДатаОкончания, Параметры.ДатаНачала));	
	Иначе
		ДополнительныеПараметры.Вставить("КоличествоДнейНазад", ПолучитьПараметрМакетаИПараметровПоИмени("КоличествоДнейНазад", ПараметрыМакета, Параметры));
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ОтключитьКоличествоДнейНазад", ПолучитьПараметрМакетаИПараметровПоИмени("ОтключитьКоличествоДнейНазад", ПараметрыМакета, Параметры));
	Если ДополнительныеПараметры.КоличествоДнейНазад > 1 Тогда
		Если НачалоДня(Параметры.ДатаНачала) = НачалоДня(Параметры.ДатаОкончания) Тогда 
			Параметры.Вставить("ДатаНачала", ДатаДнейНазад(Параметры.ДатаНачала, ДополнительныеПараметры.КоличествоДнейНазад)); 
		КонецЕсли;
	КонецЕсли;

	
	Возврат Новый Структура("Запрос, ПараметрыМакета, ПоляНабораДанных, МассивПолей, МассивПолейКлючейПериод, ДополнительныеПараметры", Запрос, ПараметрыМакета, ПоляНабораДанных, МассивПолей, МассивПолейКлючейПериод, ДополнительныеПараметры);
	//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end		 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start									
Функция ПолучитьПараметрМакетаИПараметровПоИмени(ИмяПараметра, ПараметрыМакета, Параметры)
	Для каждого СтрокаПараметра из ПараметрыМакета Цикл
		Если СтрокаПараметра.Имя = ИмяПараметра Тогда
			Возврат СтрокаПараметра.Значение;
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаПараметра из Параметры Цикл
		Если СтрокаПараметра.Ключ = ИмяПараметра Тогда
			Возврат СтрокаПараметра.Значение;
		КонецЕсли;
	КонецЦикла;
	Если ИмяПараметра = "КоличествоДнейНазад" Тогда
		Возврат 1;
	КонецЕсли;
	Если ИмяПараметра = "ОтключитьКоличествоДнейНазад" Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ИмяПараметра = "КоличествоВПортиции" Тогда
		Возврат 1000;
	КонецЕсли;
	
	Если ИмяПараметра = "ОднимФайлом" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПараметра = "КаждаяПортицияВСвоемФоне" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПараметра = "ПроверитьТаблицу" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПараметра = "СоздаватьНесуществующиеПоляВБД" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПараметра = "Периодичность" Тогда
		Возврат "Месяц";
	КонецЕсли;
	
	Если ИмяПараметра = "ИспользоватьПериодВКлюче" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИмяПараметра = "ИспользоватьДополнительныеКлючи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПараметра = "ИспользоватьТолькоДополнительныеКлючи" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПараметра = "ФорматДанных" Тогда
		Возврат "SQL";
	КонецЕсли;

	Возврат Неопределено;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start										
Функция УстановитьПараметрыЗапросаПоУмолчанию(Параметры, ПараметрыЗапроса)
	
	Запрос = ПараметрыЗапроса.Запрос;
	ПараметрыМакета = ПараметрыЗапроса.ПараметрыМакета;
	ПоляНабораДанных = ПараметрыЗапроса.ПоляНабораДанных;
	МассивПолей = ПараметрыЗапроса.МассивПолей;
	ДополнительныеПараметры = ПараметрыЗапроса.ДополнительныеПараметры;
	//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start	  
	МассивПолейКлючейПериод = ПараметрыЗапроса.МассивПолейКлючейПериод;
	//
	Если Не ЕстьТаблицаВ(Параметры.ИмяТаблицы, Параметры) Тогда
		ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанных(Параметры, ПараметрыМакета, ПоляНабораДанных, МассивПолейКлючейПериод, ДополнительныеПараметры);
		Если Параметры.ТипБазы <> "REST"
			И Параметры.ТипБазы <> "Local"
			И Параметры.ТипБазы <> "Google Sheets" Тогда
			ТаблицаСоздана = ВыполнитьЗапросPOST(ТекстЗапроса, Параметры);
		КонецЕсли;
	КонецЕсли;
	//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 start
	ОсобыеПараметры = ПолучитьОсобыеПараметры(ДополнительныеПараметры, ПараметрыМакета);
	//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-05-2024 9:30 end
	Для каждого СтрокаПараметра из ПараметрыМакета Цикл
		Если ТипЗнч(СтрокаПараметра.ТипЗначения) = Тип("ОписаниеТипов") Тогда
			Если Строка(СтрокаПараметра.ТипЗначения) = "Стандартный период" Тогда				
				ДатаНачала = ВернутьДату_Запрос_НаСервере("Начало", Параметры.ДатаНачала, Параметры.ДатаНачала, Параметры.ДатаОкончания, ОсобыеПараметры);
				ДатаОкончания = ВернутьДату_Запрос_НаСервере("Конец", Параметры.ДатаНачала, Параметры.ДатаНачала, Параметры.ДатаОкончания, ОсобыеПараметры);
                СтрокаПараметра.Значение = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
				Запрос.УстановитьПараметр(СтрокаПараметра.Имя, СтрокаПараметра.Значение);
			ИначеЕсли Строка(СтрокаПараметра.ТипЗначения) = "Дата" Тогда
				Запрос.УстановитьПараметр(СтрокаПараметра.Имя, ВернутьДату_Запрос_НаСервере(СтрокаПараметра.Имя, Параметры.ДатаНачала, Параметры.ДатаНачала, Параметры.ДатаОкончания, ОсобыеПараметры));
			Иначе
				Запрос.УстановитьПараметр(СтрокаПараметра.Имя, СтрокаПараметра.Значение);	
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end
	Возврат Запрос;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 19:30 start
Функция СтрРазделитьРасширенная(Строка, Разделитель = ",", ВключатьПустые = Ложь,
	СокращатьНепечатаемыеСимволы = Ложь, РазделительЕдинойСтрокой = Истина) Экспорт

	Если РазделительЕдинойСтрокой И СтрДлина(Разделитель) > 0 Тогда

		Результат = РазложитьСтрокуВМассивПодстрок(
		Строка, Разделитель, НЕ ВключатьПустые, СокращатьНепечатаемыеСимволы);

	Иначе

		Результат = СтрРазделить(Строка, Разделитель, ВключатьПустые);
		Если СокращатьНепечатаемыеСимволы Тогда
			Для Индекс = 0 По Результат.Количество()-1 Цикл
				Результат[Индекс] = СокрЛП(Результат[Индекс]);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;        

	Возврат Результат;

КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:30 start
Функция ОбнулитьКоличествоДнейЕслиНетПараметровДаты(ТекстЗапрос, ДополнительныеПараметры)
	
	КоличествоДнейНазад = ДополнительныеПараметры.КоличествоДнейНазад;
	ЕстьДата1 = Ложь;
	ЕстьДата2 = Ложь;
	Если СтрНайти(ТекстЗапрос, "Дата1") > 0 Тогда
		ЕстьДата1 = Истина;
	КонецЕсли;
	Если СтрНайти(ТекстЗапрос, "Дата2") > 0 Тогда
		ЕстьДата2 = Истина;
	КонецЕсли;
	//
	Если НЕ ЕстьДата1 И НЕ ЕстьДата2 Тогда
		КоличествоДнейНазад = 0;
	ИначеЕсли ЕстьДата1 И НЕ ЕстьДата2 ИЛИ НЕ ЕстьДата1 И ЕстьДата2 Тогда
		//КоличествоДнейНазад = 1;
	Иначе
	КонецЕсли;
	Если ДополнительныеПараметры.ОтключитьКоличествоДнейНазад Тогда
		КоличествоДнейНазад = 0;
	КонецЕсли;
	//
	Возврат КоличествоДнейНазад;
	
КонецФункции	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:30 start
Функция ВернутьЕстьДатаВПараметрахЗапроса(ПараметрыМакета)
	
	Для каждого СтрокаПараметра из ПараметрыМакета Цикл
		Если ТипЗнч(СтрокаПараметра.ТипЗначения) = Тип("ОписаниеТипов") 
			ИЛИ ТипЗнч(СтрокаПараметра.ТипЗначения) = Тип("TypeDescription") Тогда
			Если Строка(СтрокаПараметра.ТипЗначения) = "Стандартный период" Тогда
				Возврат Истина;
			ИначеЕсли Строка(СтрокаПараметра.ТипЗначения) = "Дата" 
				ИЛИ Строка(СтрокаПараметра.ТипЗначения) = "Date" Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:30 start									  
Процедура ВыгрузитьДанныеВБазуДанных_Запрос_НаСервере(Запрос, Параметры, ПараметрыЗапроса)
	
	ПараметрыМакета = ПараметрыЗапроса.ПараметрыМакета;
	ПоляНабораДанных = ПараметрыЗапроса.ПоляНабораДанных;
	МассивПолей = ПараметрыЗапроса.МассивПолей;
	ДополнительныеПараметры = ПараметрыЗапроса.ДополнительныеПараметры;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", Параметры.ИмяТаблицы);
	ОсобыеПараметры = ПолучитьОсобыеПараметры(ДополнительныеПараметры, ПараметрыМакета);
	ДополнительныеПараметры.Вставить("ЕстьДатаВПараметрахЗапроса", ВернутьЕстьДатаВПараметрахЗапроса(ПараметрыМакета));	
	ИндексЦикла = 0;
	//
	Если ДополнительныеПараметры.ЕстьДатаВПараметрахЗапроса Тогда
		ДополнительныеПараметры.Вставить("КоличествоДнейНазад", ОбнулитьКоличествоДнейЕслиНетПараметровДаты(Запрос.Текст, ДополнительныеПараметры));
	Иначе
		ДополнительныеПараметры.Вставить("КоличествоДнейНазад", 0);
	КонецЕсли;
	//
	Если ДополнительныеПараметры.КоличествоДнейНазад > 0 Тогда
		Параметры.Вставить("КоличествоЗапросов", ДополнительныеПараметры.КоличествоДнейНазад + 1);
		НоваяДатаОтчета = НачалоДня(Параметры.ДатаНачала);
		Для Счетчик = 1 По ДополнительныеПараметры.КоличествоДнейНазад + 1 Цикл
			//
			//Если ВернутьПроверкуИндексаЦикла(ИндексЦикла, ПолучитьКоличествоЦикловДней()) Тогда
			//	Прервать;
			//КонецЕсли;
			//ИндексЦикла = ИндексЦикла + 1;
			//
			Параметры.Вставить("ИндексЗапроса", Счетчик);
			Для каждого СтрокаПараметра из ПараметрыМакета Цикл
				Если ТипЗнч(СтрокаПараметра.ТипЗначения) = Тип("ОписаниеТипов")
					ИЛИ ТипЗнч(СтрокаПараметра.ТипЗначения) = Тип("TypeDescription")  Тогда
					Если Строка(СтрокаПараметра.ТипЗначения) = "Стандартный период" Тогда
						ДатаНачала = ВернутьДату_Запрос_НаСервере("Начало", НоваяДатаОтчета, НоваяДатаОтчета, НоваяДатаОтчета, ОсобыеПараметры);
						ДатаОкончания = ВернутьДату_Запрос_НаСервере("Конец", НоваяДатаОтчета, НоваяДатаОтчета, НоваяДатаОтчета, ОсобыеПараметры);
                        СтрокаПараметра.Значение = Новый СтандартныйПериод(ДатаНачала, ДатаОкончания);
						Запрос.УстановитьПараметр(СтрокаПараметра.Имя, СтрокаПараметра.Значение);
					ИначеЕсли Строка(СтрокаПараметра.ТипЗначения) = "Дата" 
						ИЛИ Строка(СтрокаПараметра.ТипЗначения) = "Date" Тогда
						Запрос.УстановитьПараметр(СтрокаПараметра.Имя, ВернутьДату_Запрос_НаСервере(СтрокаПараметра.Имя, НоваяДатаОтчета, НоваяДатаОтчета, НоваяДатаОтчета, ОсобыеПараметры));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЗаписатьРезультатЗапросаЭкстракторНаСервере(Запрос, Параметры, ПараметрыЗапроса, НоваяДатаОтчета, ПоляНабораДанных, МассивПолей, ДополнительныеПараметры);
			//
			НоваяДатаОтчета = ДатаДнейВперед(НоваяДатаОтчета, 1);
			Если НоваяДатаОтчета > Параметры.ДатаОкончания Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Параметры.Вставить("КоличествоЗапросов", 1);
		Параметры.Вставить("ИндексЗапроса", 1);
		ЗаписатьРезультатЗапросаЭкстракторНаСервере(Запрос, Параметры, ПараметрыЗапроса, Параметры.ДатаНачала, ПоляНабораДанных, МассивПолей, ДополнительныеПараметры);
	КонецЕсли;	 
	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-06-2025 9:3 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start											  
Функция ДатаДнейВперед(ДатаНачала, КоличествоДней)
	Возврат НачалоДня(ДатаНачала) + 60 * 60 * 24 * КоличествоДней; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:3 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start									
Функция ДатаДнейНазад(ДатаНачала, КоличествоДней)
	Возврат НачалоДня(ДатаНачала) - 60 * 60 * 24 * КоличествоДней; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:3 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start										
Функция РозностьВДнях(ДатаОкончания, ДатаНачала)
	Возврат (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала)) / (60 * 60 * 24); 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:3 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 30-05-2024 19:30 start
Функция ЕстьКолонкаВТЗ(ТЗ, ИмяКолонки)
	Для каждого СтрокаК из ТЗ.Колонки Цикл
		Если ВРег(СтрокаК.Имя) = ВРег(ИмяКолонки) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 30-05-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 9:30 start																						 
Процедура ЗаписатьРезультатЗапросаЭкстракторНаСервере(Запрос, Параметры, ПараметрыЗапроса, ПериодДата,
	ПоляНабораДанных = Неопределено, МассивПолей = Неопределено, ДополнительныеПараметры = Неопределено,
	ВходнаяТЗ = Неопределено, МассивПолейЗапрос = Неопределено, ИндексацияТЗ = Неопределено,
	ЕстьРазница = Неопределено, ПроверятьТаблицуСоздаватьПоля = Истина)
	Параметры.Вставить("ПериодДата", ПериодДата);
	Параметры.Вставить("ЕстьДатаВПараметрахЗапроса", ДополнительныеПараметры.ЕстьДатаВПараметрахЗапроса);
	//
	Если ВходнаяТЗ = Неопределено Тогда
		РезультатЗапроса = Запрос.Выполнить();
		МассивПолейЗапрос = ВернутьМассивПорядокПериодИзРезультатаЗапроса(РезультатЗапроса, ДополнительныеПараметры,
			"Имя");
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если МассивПолейЗапрос = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	Если ВходнаяТЗ = Неопределено Тогда
		ВыборкаРезультата = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	Иначе
		ВыборкаРезультата = ВходнаяТЗ.Скопировать();
	КонецЕсли;
	//
	Если Параметры.ТипБазы = "REST" 
		ИЛИ Параметры.ТипБазы = "Local"
		ИЛИ Параметры.ТипБазы = "Google Sheets" Тогда
		Параметры.Вставить("ОписаниеТаблицыБД", ОписаниеТаблицыВREST(МассивПолейЗапрос));
	КонецЕсли;
	РезультатИндексацииПоСКД = ВернутьИндекациюПоСКДОписаниеТаблицыБД(Параметры.ОписаниеТаблицыБД,
		ВыборкаРезультата.Колонки, Параметры, ДополнительныеПараметры);
	ИндексацияТЗ = РезультатИндексацииПоСКД.ИндексацияТЗ;
	ЕстьРазница = РезультатИндексацииПоСКД.ЕстьРазница;
	//
	Если ПроверятьТаблицуСоздаватьПоля И ДополнительныеПараметры.ПроверитьТаблицу Тогда
		НайденныйСтроки = ИндексацияТЗ.НайтиСтроки(Новый Структура("ЕстьРазница", Истина));
		Сообщение = "";
		Для Каждого СтрокаН Из НайденныйСтроки Цикл
			Сообщение = Сообщение + Символы.ПС + СтрокаН.Имя;
		КонецЦикла;
		Сообщить(Сообщение);
		ДополнительныеПараметры.Вставить("ПроверитьТаблицу", Ложь);
		Если Не ДополнительныеПараметры.СоздаватьНесуществующиеПоляВБД Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//
	Если ПроверятьТаблицуСоздаватьПоля И ДополнительныеПараметры.СоздаватьНесуществующиеПоляВБД Тогда
		//
		НайденныйСтроки = ИндексацияТЗ.НайтиСтроки(Новый Структура("ЕстьРазница", Истина));
		Для Каждого СтрокаН Из НайденныйСтроки Цикл
			ТекстЗапросаPOST = СтрокаН.СозданиеПоля;
			Если ТекстЗапросаPOST = "" Тогда
				Продолжить;
			КонецЕсли;
			Если Параметры.ТипБазы <> "REST" 
				И Параметры.ТипБазы <> "Local"
				И Параметры.ТипБазы <> "Google Sheets" Тогда
				РезультатВыполненияЗапроса = ВыполнитьЗапросPOST(ТекстЗапросаPOST, Параметры);
			КонецЕсли;
		КонецЦикла;
		ДополнительныеПараметры.Вставить("СоздаватьНесуществующиеПоляВБД", Ложь);
		//
		РезультатИндексацииПоСКД = ВернутьИндекациюПоСКДОписаниеТаблицыБД(Параметры.ОписаниеТаблицыБД,
			ВыборкаРезультата.Колонки, Параметры, ДополнительныеПараметры);
		ИндексацияТЗ = РезультатИндексацииПоСКД.ИндексацияТЗ;
		ЕстьРазница = РезультатИндексацииПоСКД.ЕстьРазница;
	КонецЕсли;
	//
	КоличествоСтрокМаксЗаРаз = ДополнительныеПараметры.КоличествоВПортиции;
	ЕстьКолонкаПериодРегистратора = ЕстьКолонкаВТЗ(ВыборкаРезультата, "ПериодРегистратор");
	//Параметры.Вставить("ИдентификаторВыгрузки", Новый УникальныйИдентификатор);
	ТекстЗапроса = "";
	МассивПолейЗначения = ПолучитьМассивПолейЗначения(ПараметрыЗапроса);
	Если Параметры.ТипБазы = "REST" 
		ИЛИ Параметры.ТипБазы = "Local"
		ИЛИ Параметры.ТипБазы = "Google Sheets" Тогда
		Если ДополнительныеПараметры.ЭтоШапкаПерваяСтрока Тогда
			СтрокаПоля = ПолучитьМассивЗначенийВСтрокуАпостроф(МассивПолей, Ложь, Ложь);
			ТекстЗапроса = ТекстЗапроса + СтрокаПоля + "" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	ИндексЦикла = 0;
	//
	МассивСтрокЗначений = Новый Массив;
	//
	Если (Параметры.ТипБазы = "Local" И (ДополнительныеПараметры.ФорматДанных = "XLS" ИЛИ ДополнительныеПараметры.ФорматДанных = "XLSX")) Тогда
//		ВыборкаРезультатаСокр = ВыборкаРезультата.СкопироватьКолонки();
//		Для Каждого СтрокаР Из ВыборкаРезультата Цикл
//			НоваяСтрока = ВыборкаРезультатаСокр.Добавить();
//			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаР);
//			Если ВернутьПроверкуИндексаЦикла(ИндексЦикла, ПолучитьКоличествоЦикловЗапрос()) Тогда
//				Прервать;
//			КонецЕсли;
//			ИндексЦикла = ИндексЦикла + 1;
//		КонецЦикла;
//		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST(ТекстЗапросаPOST, Параметры, ВыборкаРезультатаСокр);
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST(ТекстЗапросаPOST, Параметры, ВыборкаРезультата);
	Иначе
		Если ДополнительныеПараметры.ОднимФайлом Тогда
			СтрокиТекстаЗапроса = "";
			КоличествоСтрокОбработано = 0;
			ЗначенияЗапроса = "";
			КоличествоЗаписей = ВыборкаРезультата.Количество();
			КоличествоСтрокМаксЗаРаз = КоличествоЗаписей;
			ИндексЗаписи = 0;
			Параметры.Вставить("КоличествоЗаписей", КоличествоЗаписей);
			//
			Если Параметры.ТипБазы = "ClickHouseDB" Тогда
				ТекстЗапроса = "INSERT INTO " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит + " (*)";
			ИначеЕсли Параметры.ТипБазы = "REST" Тогда
				Если ДополнительныеПараметры.ФорматДанных = "CSV_WH" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "CSV" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "JSON" Тогда
					ТекстЗапроса = "[";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "XML" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "ClickHouseDB" Тогда
					ТекстЗапроса = "INSERT INTO " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит + " (*)";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "PostgreSQL" Тогда
					ТекстЗапроса = "INSERT INTO " + Параметры.ИмяТаблицыТранслит + "";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "MySQL" Тогда
					ТекстЗапроса = "INSERT INTO " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит + "";
				Иначе
					//ТекстЗапросаPOST = ТекстЗапроса + ЗначенияЗапроса + ";";
				КонецЕсли;
			ИначеЕсли Параметры.ТипБазы = "Local" Тогда
				Если ДополнительныеПараметры.ФорматДанных = "CSV_WH" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "CSV" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "JSON" Тогда
					ТекстЗапроса = "[";
				ИначеЕсли ДополнительныеПараметры.ФорматДанных = "XML" Тогда
					//ТекстЗапроса = ТекстЗапроса + ЗначенияЗапроса + ";";
				Иначе
					//ТекстЗапросаPOST = ТекстЗапроса + ЗначенияЗапроса + ";";
				КонецЕсли;
			ИначеЕсли Параметры.ТипБазы = "Google Sheets" Тогда
				ТекстЗапроса = "[";
			ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
				ТекстЗапроса = "INSERT INTO " + Параметры.ИмяТаблицыТранслит + "";
			ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
				ТекстЗапроса = "INSERT INTO " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит + "";
			Иначе
			КонецЕсли;
			//
			Для Каждого СтрокаР Из ВыборкаРезультата Цикл
				//Если ВернутьПроверкуИндексаЦикла(ИндексЦикла, ПолучитьКоличествоЦикловЗапрос()) Тогда
				//	Прервать;
				//КонецЕсли;
				//ИндексЦикла = ИндексЦикла + 1;
				Параметры.Вставить("ИндексЗаписи", ИндексЗаписи);
				//
				КоличествоСтрокОбработано = КоличествоСтрокОбработано + 1;
				ПериодДата = ?(ЕстьКолонкаПериодРегистратора, СтрокаР.ПериодРегистратор, ПериодДата);
				Если КоличествоСтрокОбработано = КоличествоСтрокМаксЗаРаз Или (ИндексЗаписи + 1) = КоличествоЗаписей Тогда
					Если Параметры.ТипБазы = "ClickHouseDB" Тогда
						ЗначенияЗапроса = ЗначенияЗапроса + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата,
							МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
						ТекстЗапросаPOST = ПолучитьТелоЗапросаClickHouseDB(ТекстЗапроса, ЗначенияЗапроса);
					ИначеЕсли Параметры.ТипБазы = "REST" Тогда
						ТекстЗапросаPOST = ТекстЗапроса + ВернутьЗначенияЗапросREST(СтрокаР, Параметры,
							ДополнительныеПараметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница,
							ПараметрыЗапроса, МассивПолейЗначения, ЗначенияЗапроса, Истина, ЕстьКолонкаПериодРегистратора);
					ИначеЕсли Параметры.ТипБазы = "Local" Тогда
						ТекстЗапросаPOST = ТекстЗапроса + ВернутьЗначенияЗапросREST(СтрокаР, Параметры,
							ДополнительныеПараметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница,
							ПараметрыЗапроса, МассивПолейЗначения, ЗначенияЗапроса, Истина, ЕстьКолонкаПериодРегистратора);
					ИначеЕсли Параметры.ТипБазы = "Google Sheets" Тогда
						МассивСтрокЗначений.Добавить(ВернутьЗначенияЗапросREST(СтрокаР, Параметры,
							ДополнительныеПараметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница,
							ПараметрыЗапроса, МассивПолейЗначения, ЗначенияЗапроса, Истина, ЕстьКолонкаПериодРегистратора));
					ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
						ЗначенияЗапроса = ЗначенияЗапроса + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата,
							МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
						ТекстЗапросаPOST = ПолучитьТелоЗапросаPostgreSQL(МассивПолей, ТекстЗапроса, ЗначенияЗапроса,
							ПараметрыЗапроса, МассивПолейЗначения);
					ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
						ЗначенияЗапроса = ЗначенияЗапроса + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата,
							МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
						ТекстЗапросаPOST = ПолучитьТелоЗапросаMySQL(МассивПолей, ТекстЗапроса, ЗначенияЗапроса,
							МассивПолейЗначения);
					Иначе
					КонецЕсли;
					//
					Если Параметры.ТипБазы = "Google Sheets" Тогда
						РезультатВыполненияЗапроса = ВыполнитьЗапросPOST(ТекстЗапросаPOST, Параметры, МассивСтрокЗначений, МассивПолей);
					Иначе
						РезультатВыполненияЗапроса = ВыполнитьЗапросPOST(ТекстЗапросаPOST, Параметры);
					КонецЕсли;
					//
					Если РезультатВыполненияЗапроса Тогда
						РезультатВыполненияЗапроса = ВыполнитьРезультатВыполненияЗапросаПосле(Параметры);
					Иначе
						//РезультатВыполненияЗапроса = ВыполнитьРезультатВыполненияЗапросаПриОшибке(ЗначенияЗапроса, Параметры, ПараметрыЗапроса, ВыборкаРезультата, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
					КонецЕсли;
					КоличествоСтрокОбработано = 0;
					ЗначенияЗапроса = "";
				Иначе
					ПериодДата = ?(ЕстьКолонкаПериодРегистратора, СтрокаР.ПериодРегистратор, ПериодДата);
					Если Параметры.ТипБазы = "REST" 
						ИЛИ Параметры.ТипБазы = "Local" Тогда
						ЗначенияЗапроса = ВернутьЗначенияЗапросREST(СтрокаР, Параметры, ДополнительныеПараметры,
							ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница, ПараметрыЗапроса,
							МассивПолейЗначения, ЗначенияЗапроса, Ложь, ЕстьКолонкаПериодРегистратора);
					ИначеЕсли Параметры.ТипБазы = "Google Sheets" Тогда
						МассивСтрокЗначений.Добавить(ВернутьЗначенияЗапросREST(СтрокаР, Параметры,
							ДополнительныеПараметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница,
							ПараметрыЗапроса, МассивПолейЗначения, ЗначенияЗапроса, Истина, ЕстьКолонкаПериодРегистратора));
					Иначе
						ЗначенияЗапроса = ЗначенияЗапроса + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата,
							МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
						ЗначенияЗапроса = ЗначенияЗапроса + "," + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
				ИндексЗаписи = ИндексЗаписи + 1;
			КонецЦикла;
		Иначе
			ТЗ = ВыборкаРезультата.СкопироватьКолонки();
			Счетчик = 0;
			СчетчикИтераций = 0;
			ИндексЗаписи = 0;
			ВыборкаРезультатаКоличество = ВыборкаРезультата.Количество();
			Если КоличествоСтрокМаксЗаРаз = 1 Тогда
				Для Каждого СтрокаР Из ВыборкаРезультата Цикл
					//Если ВернутьПроверкуИндексаЦикла(ИндексЦикла, ПолучитьКоличествоЦикловЗапрос()) Тогда
					//	Прервать;
					//КонецЕсли;
					//ИндексЦикла = ИндексЦикла + 1;
					ВставитьЗаписьВБД(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос,
						ИндексацияТЗ, ЕстьРазница);
				КонецЦикла;
			Иначе
				Для Каждого СтрокаР Из ВыборкаРезультата Цикл
					//Если ВернутьПроверкуИндексаЦикла(ИндексЦикла, ПолучитьКоличествоЦикловЗапрос()) Тогда
					//	Прервать;
					//КонецЕсли;
					//ИндексЦикла = ИндексЦикла + 1;
					Счетчик = Счетчик + 1;
					ИндексЗаписи = ИндексЗаписи + 1;
					Если Счетчик >= КоличествоСтрокМаксЗаРаз Или Счетчик >= ВыборкаРезультатаКоличество Или ИндексЗаписи
						>= ВыборкаРезультатаКоличество Тогда
						СчетчикИтераций = СчетчикИтераций + 1;
						ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрокаР);
						Если ДополнительныеПараметры.КаждаяПортицияВСвоемФоне Тогда
							//Выполнить фоновое задание и передать значения
							ДополнительныеПараметры.Вставить("СчетчикИтераций", СчетчикИтераций);
							ЗапуститьФоновоеЗаданиеЭкстрактор(
								Параметры, ПериодДата, МассивПолей, ДополнительныеПараметры, ТЗ, МассивПолейЗапрос,
								РезультатИндексацииПоСКД, ЕстьРазница, ПроверятьТаблицуСоздаватьПоля);
						Иначе
							ДополнительныеПараметрыКопия = СкопироватьСтруктуру(ДополнительныеПараметры);
							ДополнительныеПараметрыКопия = ВернутьДополнительныеПараметрыДляВложенногоФона(
								ДополнительныеПараметрыКопия);
							ДополнительныеПараметрыКопия.Вставить("СчетчикИтераций", СчетчикИтераций);
							ЗаписатьРезультатЗапросаЭкстракторНаСервере(
								Запрос, Параметры, ПараметрыЗапроса, ПериодДата, ПоляНабораДанных, МассивПолей,
								ДополнительныеПараметрыКопия, ТЗ, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница,
								ПроверятьТаблицуСоздаватьПоля);
						КонецЕсли;
						//Сбросить ТЗ и счетчики
						ТЗ.Очистить();
						Счетчик = 0;
					Иначе
						ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрокаР);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьТелоЗапросаClickHouseDB(_ТекстЗапроса, _ЗначенияЗапроса)
	Возврат _ТекстЗапроса + " VALUES " + _ЗначенияЗапроса + ";";
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьТелоЗапросаPostgreSQL(_МассивПолей, _ТекстЗапроса, _ЗначенияЗапроса, _ПараметрыЗапроса, _МассивПолейЗначения)
	СтрокаПоля = ПолучитьКлючИзМассива(_МассивПолей);
	_ТекстЗапроса = _ТекстЗапроса + " ( " + СтрокаПоля + ")";
	_ТекстЗапроса = _ТекстЗапроса + " VALUES " + _ЗначенияЗапроса + "";
	СтрокаПоляКлючей = ПолучитьКлючИзМассива(_ПараметрыЗапроса.МассивПолейКлючейПериод);
	_ТекстЗапроса = _ТекстЗапроса + " ON CONFLICT (" + СтрокаПоляКлючей + ") DO UPDATE SET";
	//
	СтрокаПоляЗначения = ПолучитьКлючИзМассива(_МассивПолейЗначения);
	СтрокаПоляЗначения_EXCLUDED = ПолучитьКлючИзМассива(_МассивПолейЗначения, "EXCLUDED.");
	//
	Возврат _ТекстЗапроса + " (" + СтрокаПоляЗначения + ") = (" + СтрокаПоляЗначения_EXCLUDED + ")";
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьТелоЗапросаMySQL(_МассивПолей, _ТекстЗапроса, _ЗначенияЗапроса, _МассивПолейЗначения)
	СтрокаПоля = ПолучитьМассивЗначенийВСтрокуАпостроф(_МассивПолей);
	//
	_ТекстЗапроса = _ТекстЗапроса + " ( " + СтрокаПоля + ")";
	_ТекстЗапроса = _ТекстЗапроса + " VALUES " + _ЗначенияЗапроса + "";
	_ТекстЗапроса = _ТекстЗапроса + " ON DUPLICATE KEY UPDATE";
	СтрокаКолонкиДляUpdate = ПолучитьКолонкиДляUpdateMySQL(_МассивПолейЗначения);			
	Возврат _ТекстЗапроса + " " + СтрокаКолонкиДляUpdate + ";";
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 19:30 start
Функция ВернутьДополнительныеПараметрыДляВложенногоФона(ДополнительныеПараметрыВходящие)
	
	ДополнительныеПараметрыВходящие.Вставить("ОднимФайлом", Истина);
	ДополнительныеПараметрыВходящие.Вставить("КаждаяПортицияВСвоемФоне", Ложь);
	ДополнительныеПараметрыВходящие.Вставить("ПроверитьТаблицу", Ложь);
	ДополнительныеПараметрыВходящие.Вставить("СоздаватьНесуществующиеПоляВБД", Ложь);
	
	Возврат ДополнительныеПараметрыВходящие;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 19:30 start

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 19:30 start
Функция СкопироватьСтруктуру(СтруктураВходящая)
	НоваяСтруктура = Новый Структура;

	Для каждого Элемент Из СтруктураВходящая Цикл
		НоваяСтруктура.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат НоваяСтруктура;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 19:30 start
Функция ВыполнитьЗапросPOST(ТекстЗапроса, Параметры, ТаблицаЗначенийЗапроса = Неопределено, МассивПолей = Неопределено)
	РезультатВыполненияЗапроса = Ложь;
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_ClickHouseDB(ТекстЗапроса, Параметры);
	ИначеЕсли Параметры.ТипБазы = "REST" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_REST(ТекстЗапроса, Параметры);
	ИначеЕсли Параметры.ТипБазы = "Local" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_Local(ТекстЗапроса, Параметры, ТаблицаЗначенийЗапроса);
	ИначеЕсли Параметры.ТипБазы = "Google Sheets" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_GoogleSheets(ТекстЗапроса, Параметры, ТаблицаЗначенийЗапроса, МассивПолей);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_PostgreSQL(ТекстЗапроса, Параметры);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_MySQL(ТекстЗапроса, Параметры);
	Иначе
	КонецЕсли;
	Возврат РезультатВыполненияЗапроса;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 19:30 start
Функция ВыполнитьРезультатВыполненияЗапросаПосле(Параметры)
	РезультатВыполненияЗапроса = Ложь;
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		ТекстЗапроса = "OPTIMIZE TABLE " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит +" FINAL";
		РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_ClickHouseDB(ТекстЗапроса + ";", Параметры);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
	Иначе
	КонецЕсли;
	Возврат РезультатВыполненияЗапроса;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 19:30 start
Функция ВыполнитьРезультатВыполненияЗапросаПриОшибке(ЗначенияЗапроса, Параметры, ПараметрыЗапроса, ТЗ, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	РезультатВыполненияЗапроса = Ложь;
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
	Иначе
	КонецЕсли;
	Возврат РезультатВыполненияЗапроса;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 19:30 start
Функция ПолучитьМассивПолейЗначения(ПараметрыЗапроса)
	МассивМ = Новый Массив;
	
	Для каждого СтрокаМ из ПараметрыЗапроса.МассивПолей Цикл
		Индекс = ПараметрыЗапроса.МассивПолейКлючейПериод.Найти(СтрокаМ);
		Если Индекс = Неопределено Тогда
		    МассивМ.Добавить(СтрокаМ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивМ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 19:30 start
Функция ВернутьСтрокуМассиваПоЛатинице(МассивП, ИмяЛатиница)
	Счетчик = 0;
	Для каждого СтрокаМ из МассивП Цикл
		ТранслитСтрокаМ = Транслит(СтрокаМ);
		Если ВРег(ТранслитСтрокаМ) = ВРег(ИмяЛатиница) Тогда
			Возврат Счетчик;	
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Для каждого СтрокаМ из МассивП Цикл
		СтрокаМ = ВРег(Транслит(СтрокаМ));	
	КонецЦикла;
	Возврат МассивП.Найти(ВРег(ИмяЛатиница));
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 19:30 start
Функция ВернутьИндекациюПоСКДОписаниеТаблицыБД(ВходящаяТЗ, ЗапросКолонки, Параметры, ДополнительныеПараметры)
	РезультатТЗ = ВходящаяТЗ.СкопироватьКолонки();
	Результат = Новый Структура("ИндексацияТЗ, ЕстьРазница", ВходящаяТЗ, Ложь);
	//
	КоличествоВходящаяТЗ = ВходящаяТЗ.Количество();
	МассивПолейЗапрос = ВернутьМассивПорядокПериодИзКолонокЗапроса(ЗапросКолонки, ДополнительныеПараметры);
	КоличествоМассивПолейЗапрос = МассивПолейЗапрос.Количество();
	Если КоличествоВходящаяТЗ <> КоличествоМассивПолейЗапрос Тогда
		Результат.Вставить("ЕстьРазница", Истина);	
	КонецЕсли;
	//
	Индекс = 0;
	Для Каждого СтрокаТЗ Из ВходящаяТЗ Цикл
		ИндексКолонки = ВернутьСтрокуМассиваПоЛатинице(МассивПолейЗапрос, СтрокаТЗ.Имя);
		Если ИндексКолонки = Неопределено Тогда
			НоваяСтрокаТЗ = РезультатТЗ.Добавить();
			НоваяСтрокаТЗ.ЕстьРазница = Истина;
			Результат.Вставить("ЕстьРазница", Истина);
			НоваяСтрокаТЗ.ИндексСКД = -1;
		Иначе
			НоваяСтрокаТЗ = РезультатТЗ.Добавить();
			НоваяСтрокаТЗ.ЕстьРазница = Ложь;
			Результат.Вставить("ЕстьРазница", Ложь);
			НоваяСтрокаТЗ.Имя = СтрокаТЗ.Имя;
			НоваяСтрокаТЗ.ИмяСКД = МассивПолейЗапрос[ИндексКолонки];
			НоваяСтрокаТЗ.ИндексСКД = ИндексКолонки;
		КонецЕсли;				 
	КонецЦикла;
	Для Каждого КолонкаЗ Из ЗапросКолонки Цикл
		ТранслитСтрокаМ = Транслит(КолонкаЗ.Имя);
		НайденнаяСтрока = ВходящаяТЗ.Найти(ТранслитСтрокаМ, "Имя");
		НайденныеСтрокиТЗ = РезультатТЗ.НайтиСтроки(Новый Структура("ИмяСКД", КолонкаЗ.Имя));
		КоличествоНайденныеСтрокиТЗ = НайденныеСтрокиТЗ.Количество();
		Если НайденнаяСтрока = Неопределено Тогда
			Если КоличествоНайденныеСтрокиТЗ <= 0 Тогда
				НоваяСтрокаТЗ = РезультатТЗ.Добавить();
			Иначе
				НоваяСтрокаТЗ = НайденныеСтрокиТЗ[0];
			КонецЕсли;
			НоваяСтрокаТЗ.ЕстьРазница = Истина;
			Результат.Вставить("ЕстьРазница", Истина);
		Иначе
			Если КоличествоНайденныеСтрокиТЗ <= 0 Тогда
				НоваяСтрокаТЗ = РезультатТЗ.Добавить();
			Иначе
				НоваяСтрокаТЗ = НайденныеСтрокиТЗ[0];
			КонецЕсли;
			НоваяСтрокаТЗ.ЕстьРазница = Ложь;
			Результат.Вставить("ЕстьРазница", Ложь);
			НоваяСтрокаТЗ.Имя = НайденнаяСтрока.Имя;
		КонецЕсли;
		НоваяСтрокаТЗ.ИмяСКД = КолонкаЗ.Имя;
		НоваяСтрокаТЗ.ИндексСКД = НайтиИндексПоляВМассиве(МассивПолейЗапрос, КолонкаЗ.Имя);
		
		НоваяСтрокаТЗ.СозданиеПоля = "ALTER TABLE " + Параметры.ИмяБазы + "." + Параметры.ИмяТаблицыТранслит
			+ " ADD COLUMN `" + ТранслитСтрокаМ + "` " + ПолучитьТипПоляНабора(КолонкаЗ, Параметры) + ";";
		Индекс = Индекс + 1;
	КонецЦикла;
	//
	Результат.Вставить("ИндексацияТЗ", РезультатТЗ);
	Возврат Результат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-08-2025 19:30 start
Функция ВернутьИндексКолонкиСКДПоИмени(Колонки, ИмяКолонки)
	Индекс = 0;
	Для каждого СтрокаМ из Колонки Цикл
		Если СтрокаМ.Имя = ИмяКолонки Тогда
			Возврат Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат -1;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 start																						 
Процедура ЗаписатьРезультатЗапросаЭкстракторФоновоеЗадание(ПараметрыЗапуска = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Запрос = ПараметрыЗапуска.Запрос;
	Параметры = ПараметрыЗапуска.Параметры;
	ПериодДата = ПараметрыЗапуска.ПериодДата;
	ПоляНабораДанных = ПараметрыЗапуска.ПоляНабораДанных;
	МассивПолей = ПараметрыЗапуска.МассивПолей;
	ДополнительныеПараметры = ПараметрыЗапуска.ДополнительныеПараметры;
	ВходнаяТЗ = ПараметрыЗапуска.ВходнаяТЗ;
	МассивПолейЗапрос = ПараметрыЗапуска.МассивПолейЗапрос;
	ИндексацияТЗ = ПараметрыЗапуска.ИндексацияТЗ;
	ЕстьРазница = ПараметрыЗапуска.ЕстьРазница;
	ПроверятьТаблицуСоздаватьПоля = ПараметрыЗапуска.ПроверятьТаблицуСоздаватьПоля;
	ПараметрыЗапроса = ПолучитьСтруктуруПараметровЗапроса(Параметры);
	
	ЗаписатьРезультатЗапросаЭкстракторНаСервере(
		Запрос, 
		Параметры,
		ПараметрыЗапроса, 
		ПериодДата, 
		ПоляНабораДанных, 
		МассивПолей, 
		ДополнительныеПараметры, 
		ВходнаяТЗ, 
		МассивПолейЗапрос,
		ИндексацияТЗ,
		ЕстьРазница,
		ПроверятьТаблицуСоздаватьПоля);
	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 start
Процедура ЗапуститьФоновоеЗаданиеЭкстрактор(Параметры, ПериодДата, МассивПолей = Неопределено, 
	ДополнительныеПараметры = Неопределено, ВходнаяТЗ = Неопределено, МассивПолейЗапрос = Неопределено, 
	ИндексацияТЗ = Неопределено, ЕстьРазница = Неопределено, ПроверятьТаблицуСоздаватьПоля = Истина)
	ДополнительныеПараметрыКопия = СкопироватьСтруктуру(ДополнительныеПараметры);
	ДополнительныеПараметрыКопия = ВернутьДополнительныеПараметрыДляВложенногоФона(ДополнительныеПараметрыКопия);
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	//
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("Запрос", Неопределено);
	ПараметрыЗапуска.Вставить("Параметры", Параметры);
	ПараметрыЗапуска.Вставить("ПериодДата", ПериодДата);
	ПараметрыЗапуска.Вставить("ПоляНабораДанных", Неопределено);
	ПараметрыЗапуска.Вставить("МассивПолей", МассивПолей);
	ПараметрыЗапуска.Вставить("СчетчикИтераций", ДополнительныеПараметрыКопия.СчетчикИтераций);
	ПараметрыЗапуска.Вставить("ИмяТаблицы", ДополнительныеПараметрыКопия.ИмяТаблицы);
	ПараметрыЗапуска.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыКопия);
	ПараметрыЗапуска.Вставить("ВходнаяТЗ", ВходнаяТЗ);
	ПараметрыЗапуска.Вставить("МассивПолейЗапрос", МассивПолейЗапрос);
	ПараметрыЗапуска.Вставить("ИндексацияТЗ", ИндексацияТЗ);
	ПараметрыЗапуска.Вставить("ЕстьРазница", ЕстьРазница);
	ПараметрыЗапуска.Вставить("ПроверятьТаблицуСоздаватьПоля", ПроверятьТаблицуСоздаватьПоля);
	//
	//ПараметрыЗапуска.Вставить("ТекущийПользователь", ПолучитьТекущийПользователь());
		
	СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор);
    
	//ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	//ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	// указываем интервал обновления состояния в секундах, если не указать, 
	// то интервал будет увеличиваться при каждой итерации в 1.4 раза.
	//ПараметрыОжидания.Интервал = 10;
    
	//ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, Новый ОписаниеОповещения("ОбработатьДанные", ЭтотОбъект), ПараметрыыОжидания);
        
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 start
Функция ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор)
	
	СтрокаНаименование = "Фоновое задание длительной: Синхронизация1C_ClickHouse" + ПараметрыЗапуска.ИмяТаблицы + " " + ПараметрыЗапуска.СчетчикИтераций;
	
	НаименованиеЗадания = НСтр("ru = '" + СтрокаНаименование + "'");
    
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
    
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяОбработки", ЭтотОбъект.ИспользуемоеИмяФайла);
	ПараметрыЗадания.Вставить("ИмяМетода", "ЗаписатьРезультатЗапросаЭкстракторФоновоеЗадание");
	ПараметрыЗадания.Вставить("ПараметрыВыполнения", ПараметрыЗапуска);
	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка", Истина);
	ПараметрыЗадания.Вставить("ДополнительнаяОбработкаСсылка",Неопределено);
    
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
    Если ПараметрыЗапуска.Параметры.ИспользоватьСтарыйМетодФоновыхЗаданий Тогда
		СтруктураФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ВыполняемыйМетод, ПараметрыЗадания, НаименованиеЗадания, Истина);
	Иначе
		СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
	КонецЕсли;
		
	Возврат СтруктураФоновогоЗадания;
    
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 16-01-2023 18:00 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 23-10-2024 18:00 start
Функция ЭкранированиеСпециальныхСимволов(Значение)
	Значение = СтрЗаменить(Значение, "'", "\'");
	Значение = СтрЗаменить(Значение, "\", "\\'"); //@metakaban
	Возврат Значение;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 23-10-2024 18:00 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-11-2023 9:30 start
Функция ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	Счетчик = 0;
	ТекДата = ТекущаяДата();
	//КоличествоПолей = МассивПолейЗапрос.Количество();
	КоличествоПолей = ИндексацияТЗ.Количество();
	ТекстЗапросаПоля = "(";
	Для каждого СтрокаТЗ из ИндексацияТЗ Цикл
		Счетчик = Счетчик + 1;
		ЗначениеПоля = Неопределено;
		Если СтрокаТЗ.ИндексСКД < 0 Тогда
			ЗначениеПоля = "'0'";		
		Иначе
			СтрокаП = МассивПолейЗапрос[СтрокаТЗ.ИндексСКД];
			Если ВРег(СтрокаП) = ВРег("Период") > 0 Тогда
				ЗначениеПоля = ПолучитьДатуВремяISO8601(ПериодДата);
			ИначеЕсли ВРег(СтрокаП) = ВРег("ДатаОбновленияЗаписи") > 0 Тогда
				ЗначениеПоля = ПолучитьДатуВремяISO8601(ТекДата);
			Иначе
				Если НайтиПолейВМассиве(МассивПолей, СтрокаП) Тогда
					ЗначениеПоля = Строка(СтрокаР[СтрокаП]);
					ИндексДата = СтрНайти(ВРег(СтрокаП), ВРег("Дата"));
					Если ТипЗнч(СтрокаР[СтрокаП]) = Тип("Дата")
						ИЛИ (ИндексДата > 0 И ИндексДата < 5) Тогда
						
						ЗначениеСтроки = СтрокаР[СтрокаП];
						Если Строка(СтрокаР[СтрокаП]) = "" Тогда
							ЗначениеСтроки = Дата(1,1,1,0,0,0);	
						КонецЕсли;
						ЗначениеПоля = ПолучитьДатуВремяISO8601(ЗначениеСтроки);
					ИначеЕсли ТипЗнч(СтрокаР[СтрокаП]) = Тип("Булево") Тогда
						ЗначениеПоля = Число(СтрокаР[СтрокаП]);
						ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ",", ".");
					ИначеЕсли ТипЗнч(СтрокаР[СтрокаП]) = Тип("Число") Тогда
						ЗначениеПоля = ВернутьЧислоБезПробелов(СтрокаР[СтрокаП]);
						ЗначениеПоля = "'" + ЗначениеПоля + "'";
					ИначеЕсли ТипЗнч(СтрокаР[СтрокаП]) = Тип("Строка") Тогда
						ЗначениеПоля = СокрЛП(Строка(СтрокаР[СтрокаП]));
						ЗначениеПоля = "'" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "'";
					ИначеЕсли ТипЗнч(СтрокаР[СтрокаП]) = Тип("УникальныйИдентификатор") Тогда
						ЗначениеПоля = "'" + СокрЛП(Строка(СтрокаР[СтрокаП])) + "'";
					Иначе
						Если СтрокаР[СтрокаП] <> NULL И СтрокаР[СтрокаП] <> Неопределено Тогда
							ТипЗначения = ТипЗнч(СтрокаР[СтрокаП]);
							ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
							Если ОбъектМетаданных = Неопределено Тогда
								ЗначениеПоля = "'0'";
							ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
								ЗначениеПоля =  СокрЛП(Строка(СтрокаР[СтрокаП]));
								ЗначениеПоля = "'" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "'";
							ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
								ЗначениеПоля = СокрЛП(Строка(СтрокаР[СтрокаП]));
								ЗначениеПоля = "'" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "'";
							Иначе
								ЗначениеПоля = "'0'";
							КонецЕсли;
						Иначе
							ЗначениеПоля = СокрЛП(Строка(СтрокаР[СтрокаП]));
							ЗначениеПоля = "'" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "'";
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					ЗначениеПоля = "'0'";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеПоля = "" Тогда
			ЗначениеПоля = "'0'";
		ИначеЕсли ЗначениеПоля = "0" Тогда
			ЗначениеПоля = "'0'";
		ИначеЕсли ЗначениеПоля = "''" Тогда
			ЗначениеПоля = "'0'";
		Иначе
		КонецЕсли;
	
		ТекстЗапросаПоля = ТекстЗапросаПоля + ЗначениеПоля;
		Если Счетчик <> КоличествоПолей Тогда
			ТекстЗапросаПоля = ТекстЗапросаПоля + ",";	
		КонецЕсли;
	КонецЦикла;
	ТекстЗапросаПоля = ТекстЗапросаПоля + ")";
	
	Возврат ТекстЗапросаПоля;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьСтруктуруПолейИзМассива(МассивПолей)
	СтруктураРезультат = Новый Структура;
	Для каждого СтрокаМ из МассивПолей Цикл
		СтруктураРезультат.Вставить(СтрокаМ);
	КонецЦикла;
	Возврат СтруктураРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ВернутьЗначенияЗапросREST(СтрокаР, Параметры, ДополнительныеПараметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница, ПараметрыЗапроса, МассивПолейЗначения, _ЗначенияЗапроса, ЭтоКонецВыборки = Ложь, ЕстьКолонкаПериодРегистратора = Ложь)
	ЗначениеДляЗапроса = "";
	СтруктураПолей = ПолучитьСтруктуруПолейИзМассива(МассивПолейЗапрос);
	СтруктураПолейЗапрос = ПолучитьСтруктуруПолейИзМассива(МассивПолейЗапрос);
	ЗаполнитьЗначенияСвойств(СтруктураПолейЗапрос, СтрокаР);
	Если СтруктураПолейЗапрос.Свойство("Период") Тогда
		СтруктураПолейЗапрос.Вставить("Период", ПериодДата);
	КонецЕсли;
	
	Если Параметры.ФорматДанных = "CSV"
		ИЛИ Параметры.ФорматДанных = "CSV_WH"
		ИЛИ Параметры.ФорматДанных = "XLS"
		ИЛИ Параметры.ФорматДанных = "XLSX" Тогда
		ЗначениеДляЗапроса = _ЗначенияЗапроса + ВернутьЗначенияЗапросREST_CSV(СтруктураПолей, СтруктураПолейЗапрос, ДополнительныеПараметры.ЗначениеВКовычки) + ?(ЭтоКонецВыборки, "", Символы.ПС);
	ИначеЕсли Параметры.ФорматДанных = "JSON" Тогда
		Если Параметры.ТипБазы = "Google Sheets" Тогда
			ЗначениеДляЗапроса = ВернутьЗначенияЗапросREST_JSON_МассивЗначенийПолей(СтруктураПолей, СтруктураПолейЗапрос);
		Иначе
			ЗначениеДляЗапроса = _ЗначенияЗапроса + ВернутьЗначенияЗапросREST_JSON(СтруктураПолей, СтруктураПолейЗапрос) + ?(ЭтоКонецВыборки, "]", ",");
		КонецЕсли;
	ИначеЕсли Параметры.ФорматДанных = "XML" Тогда
	ИначеЕсли Параметры.ФорматДанных = "ClickHouseDB" Тогда
		РезультатЗначенияЗапроса = _ЗначенияЗапроса + "(" + ВернутьЗначенияЗапросREST_CSV(СтруктураПолей, СтруктураПолейЗапрос, ДополнительныеПараметры.ЗначениеВКовычки) + ")" + ?(ЭтоКонецВыборки, "", "," + Символы.ПС);
		Если ЭтоКонецВыборки Тогда
			ЗначениеДляЗапроса = ПолучитьТелоЗапросаClickHouseDB("", РезультатЗначенияЗапроса);
		Иначе
			ЗначениеДляЗапроса = РезультатЗначенияЗапроса;
		КонецЕсли;
	ИначеЕсли Параметры.ФорматДанных = "PostgreSQL" Тогда
		РезультатЗначенияЗапроса = _ЗначенияЗапроса + "(" + ВернутьЗначенияЗапросREST_CSV(СтруктураПолей, СтруктураПолейЗапрос, ДополнительныеПараметры.ЗначениеВКовычки) + ")" + ?(ЭтоКонецВыборки, "", "," + Символы.ПС);
		Если ЭтоКонецВыборки Тогда
			ЗначениеДляЗапроса = ПолучитьТелоЗапросаPostgreSQL(МассивПолей, "", РезультатЗначенияЗапроса, ПараметрыЗапроса, МассивПолейЗначения);
		Иначе
			ЗначениеДляЗапроса = РезультатЗначенияЗапроса;
		КонецЕсли;
	ИначеЕсли Параметры.ФорматДанных = "MySQL" Тогда
		РезультатЗначенияЗапроса = _ЗначенияЗапроса + "(" + ВернутьЗначенияЗапросREST_CSV(СтруктураПолей, СтруктураПолейЗапрос, ДополнительныеПараметры.ЗначениеВКовычки) + ")" + ?(ЭтоКонецВыборки, "", "," + Символы.ПС);
		Если ЭтоКонецВыборки Тогда
			ЗначениеДляЗапроса = ПолучитьТелоЗапросаMySQL(МассивПолей, "", РезультатЗначенияЗапроса, МассивПолейЗначения);
		Иначе
			ЗначениеДляЗапроса = РезультатЗначенияЗапроса;
		КонецЕсли;
	Иначе
		ЗначениеДляЗапроса = _ЗначенияЗапроса + ВернутьЗначенияЗапросREST_CSV(СтруктураПолей, СтруктураПолейЗапрос, ДополнительныеПараметры.ЗначениеВКовычки) + ?(ЭтоКонецВыборки, "", Символы.ПС);
	КонецЕсли;
		
	Возврат ЗначениеДляЗапроса;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ВернутьЗначенияЗапросREST_CSV(_СтруктураПолей, _СтруктураПолейЗапрос, _ЗначениеВКовычки = Истина)
	СтрокаПустаяИлиКовычка = ?(_ЗначениеВКовычки,"'", "");
	Для Каждого Элемент из _СтруктураПолейЗапрос Цикл
		ЭлементЗначение = Элемент.Значение;
		ЭлементКлюч = Элемент.Ключ;
		Если ТипЗнч(ЭлементЗначение) = Тип("Дата") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ПолучитьДатуВремяISO8601(ЭлементЗначение, _ЗначениеВКовычки));
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Булево") Тогда
			ЗначениеПоля = Число(ЭлементЗначение);
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ",", ".");
			ЗначениеПоля = СтрокаПустаяИлиКовычка + ЗначениеПоля + СтрокаПустаяИлиКовычка;
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Число") Тогда
			ЗначениеПоля = ВернутьЧислоБезПробелов(ЭлементЗначение);
			ЗначениеПоля = СтрокаПустаяИлиКовычка + ЗначениеПоля + СтрокаПустаяИлиКовычка;
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Строка") Тогда
			ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
			ЗначениеПоля = СтрокаПустаяИлиКовычка + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + СтрокаПустаяИлиКовычка;
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("УникальныйИдентификатор") Тогда
			ЗначениеПоля = СтрокаПустаяИлиКовычка + СокрЛП(Строка(ЭлементЗначение)) + СтрокаПустаяИлиКовычка;
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		Иначе
			Если ЭлементЗначение <> Null И ЭлементЗначение <> Неопределено Тогда
				ТипЗначения = ТипЗнч(ЭлементЗначение);
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Если ОбъектМетаданных = Неопределено Тогда
					ЗначениеПоля = СтрокаПустаяИлиКовычка + "0" + СтрокаПустаяИлиКовычка;
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля =  СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = СтрокаПустаяИлиКовычка + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + СтрокаПустаяИлиКовычка;
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = СтрокаПустаяИлиКовычка + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + СтрокаПустаяИлиКовычка;
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				Иначе
					ЗначениеПоля = СтрокаПустаяИлиКовычка + "0" + СтрокаПустаяИлиКовычка;
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				КонецЕсли;
			Иначе
				ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
				ЗначениеПоля = СтрокаПустаяИлиКовычка + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + СтрокаПустаяИлиКовычка;
				_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	ТекстЗапросаПоля = ПолучитьСтрокуЧерезРазделительИзСтруктуры(_СтруктураПолей, ",");
	
	Возврат ТекстЗапросаПоля;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ВернутьЗначенияЗапросREST_JSON(_СтруктураПолей, _СтруктураПолейЗапрос)
	
	Для Каждого Элемент из _СтруктураПолейЗапрос Цикл
		ЭлементЗначение = Элемент.Значение;
		ЭлементКлюч = Элемент.Ключ;
		Если ТипЗнч(ЭлементЗначение) = Тип("Дата") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Булево") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Число") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Строка") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, "" + ЭлементЗначение + "");
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("УникальныйИдентификатор") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, "" + СокрЛП(Строка(ЭлементЗначение)) + "");
		Иначе
			Если ЭлементЗначение <> Null И ЭлементЗначение <> Неопределено Тогда
				ТипЗначения = ТипЗнч(ЭлементЗначение);
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Если ОбъектМетаданных = Неопределено Тогда
					_СтруктураПолей.Вставить(ЭлементКлюч, "0");
				ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля =  СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				Иначе
					_СтруктураПолей.Вставить(ЭлементКлюч, "0");
				КонецЕсли;
			Иначе
				ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
				ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
				_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаПоля = ПолучитьТелоJSONИзСтруктуры(_СтруктураПолей);
	
	Возврат ТекстЗапросаПоля;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-09-2025 9:30 start
Функция ВернутьЗначенияЗапросREST_JSON_МассивЗначенийПолей(_СтруктураПолей, _СтруктураПолейЗапрос)
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,Истина,ЭкранированиеСимволовJSON.Нет,,,Ложь,Ложь,Ложь);
	//ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,Истина,ЭкранированиеСимволовJSON.Нет,,,Ложь,Ложь,Ложь);
	МассивЗначенийПолей = Новый Массив;
	Индекс = 1;
	Для Каждого Элемент из _СтруктураПолейЗапрос Цикл
		ЭлементЗначение = Элемент.Значение;
		ЭлементКлюч = Элемент.Ключ;
		Если ТипЗнч(ЭлементЗначение) = Тип("Дата") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Булево") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Число") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Строка") Тогда
			ЗначениеПоля = "" + ЭлементЗначение + "";
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("УникальныйИдентификатор") Тогда
			ЗначениеПоля = "" + СокрЛП(Строка(ЭлементЗначение)) + "";
			_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
		Иначе
			Если ЭлементЗначение <> Null И ЭлементЗначение <> Неопределено Тогда
				ТипЗначения = ТипЗнч(ЭлементЗначение);
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Если ОбъектМетаданных = Неопределено Тогда
					_СтруктураПолей.Вставить(ЭлементКлюч, "0");
				ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля =  СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				Иначе
					ЗначениеПоля = "0";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				КонецЕсли;
			Иначе
				ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
				ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
				_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		//
		МассивЗначенийПолей.Добавить(ЗначениеПоля);
		//
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат МассивЗначенийПолей;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-09-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-09-2025 9:30 start
Функция ВернутьЗначенияЗапросREST_JSON_GoogleSheets_structValue(_СтруктураПолей, _СтруктураПолейЗапрос)
	
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,Истина,ЭкранированиеСимволовJSON.Нет,,,Ложь,Ложь,Ложь);
	СтруктураПолей = Новый Структура;
	Индекс = 1;
	Для Каждого Элемент из _СтруктураПолейЗапрос Цикл
		СтруктураПоля = Новый Структура;
		ЭлементЗначение = Элемент.Значение;
		ЭлементКлюч = Элемент.Ключ;
		Если ТипЗнч(ЭлементЗначение) = Тип("Дата") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
			СтруктураПоля.Вставить("timestampValue", ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Булево") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
			СтруктураПоля.Вставить("boolValue", ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Число") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, ЭлементЗначение);
			СтруктураПоля.Вставить("numberValue", ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("Строка") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, "" + ЭлементЗначение + "");
			СтруктураПоля.Вставить("stringValue", ЭлементЗначение);
		ИначеЕсли ТипЗнч(ЭлементЗначение) = Тип("УникальныйИдентификатор") Тогда
			_СтруктураПолей.Вставить(ЭлементКлюч, "" + СокрЛП(Строка(ЭлементЗначение)) + "");
			СтруктураПоля.Вставить("stringValue", "" + СокрЛП(Строка(ЭлементЗначение)) + "");
		Иначе
			Если ЭлементЗначение <> Null И ЭлементЗначение <> Неопределено Тогда
				ТипЗначения = ТипЗнч(ЭлементЗначение);
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
				Если ОбъектМетаданных = Неопределено Тогда
					_СтруктураПолей.Вставить(ЭлементКлюч, "0");
					СтруктураПоля.Вставить("stringValue", "0");
				ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля =  СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
					СтруктураПоля.Вставить("stringValue", "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "");
				ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
					ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
					ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
					_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
					СтруктураПоля.Вставить("stringValue", ЗначениеПоля);
				Иначе
					_СтруктураПолей.Вставить(ЭлементКлюч, "0");
					СтруктураПоля.Вставить("stringValue", "0");
				КонецЕсли;
			Иначе
				ЗначениеПоля = СокрЛП(Строка(ЭлементЗначение));
				ЗначениеПоля = "" + ЭкранированиеСпециальныхСимволов(ЗначениеПоля) + "";
				_СтруктураПолей.Вставить(ЭлементКлюч, ЗначениеПоля);
				СтруктураПоля.Вставить("stringValue", ЗначениеПоля);
			КонецЕсли;
		КонецЕсли;
		//
		СтруктураПолей.Вставить(ЭлементКлюч, СтруктураПоля);
		//
		Индекс = Индекс + 1;
	КонецЦикла;
	СтруктураПоляИмя = Новый Структура("fields", СтруктураПолей);
	СтруктураЗначение = Новый Структура("structValue", СтруктураПоляИмя);
	ТекстЗапросаПоля = ПолучитьТелоJSONИзСтруктуры(СтруктураЗначение, ПараметрыJSON, Истина);
	Возврат ТекстЗапросаПоля;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-09-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьСтрокуЧерезРазделительИзСтруктуры(_Структура, _СтрокаРазделитель = ",") Экспорт
	КоличествоПолей = _Структура.Количество();
	ИндексПоля = 0;
	РезультатСтрока = "";
	Для Каждого Элемент из _Структура Цикл
		СтрокаРазделитель = _СтрокаРазделитель;
		ИндексПоля = ИндексПоля + 1;
		Если ИндексПоля >= КоличествоПолей Тогда
			СтрокаРазделитель = "";
		КонецЕсли;
		РезультатСтрока = РезультатСтрока + Элемент.Значение + СтрокаРазделитель;
	КонецЦикла;
	
	Возврат РезультатСтрока;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 start
Функция ПолучитьТелоJSONИзСтруктуры(_Структура, ПараметрыJSON = Неопределено, УбиратьСлешКовычку = Ложь) Экспорт
	ЗаписьJSON = Новый ЗаписьJSON;
	Если ПараметрыJSON <> Неопределено Тогда
		ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	Иначе
		ЗаписьJSON.УстановитьСтроку();
	КонецЕсли;
	ЗаписатьJSON(ЗаписьJSON, _Структура);
	ТелоJSON = ЗаписьJSON.Закрыть();
	Если УбиратьСлешКовычку Тогда
		ТелоJSON = СтрЗаменить(ТелоJSON, "\", "");
		//ТелоJSON = СтрЗаменить(ТелоJSON, "\"+Символ(34), "");
	КонецЕсли;
	Возврат ТелоJSON;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start
Функция ВставитьЗаписьВБД(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных = Неопределено, МассивПолей = Неопределено, МассивПолейЗапрос = Неопределено, ИндексацияТЗ = Неопределено, ЕстьРазница = Неопределено)
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		ВставитьЗаписьВClickHouseDB_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	ИначеЕсли Параметры.ТипБазы = "REST" Тогда
		ВставитьЗаписьВREST_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	ИначеЕсли Параметры.ТипБазы = "Local" Тогда
		ВставитьЗаписьВLocal_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		ВставитьЗаписьВPostgreSQL_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		ВставитьЗаписьВMySQL_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	Иначе
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 start
Процедура ВставитьЗаписьВClickHouseDB_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	ТекстДляЗапроса = ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_ClickHouseDB(ТекстДляЗапроса, Параметры);
	Ошибка = "";
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 start
Процедура ВставитьЗаписьВREST_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	ТекстДляЗапроса = ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_REST(ТекстДляЗапроса, Параметры);
	Ошибка = "";
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start
Процедура ВставитьЗаписьВLocal_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	ТекстДляЗапроса = ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	//РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_REST(ТекстДляЗапроса, Параметры);
	Ошибка = "";
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start
Процедура ВставитьЗаписьВPostgreSQL_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	ТекстДляЗапроса = ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_PostgreSQL(ТекстДляЗапроса, Параметры);
	Ошибка = "";
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 start
Процедура ВставитьЗаписьВMySQL_ПериодСхемаКомпоновкиДанных(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	ТекстДляЗапроса = ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	РезультатВыполненияЗапроса = ВыполнитьЗапросPOST_MySQL(ТекстДляЗапроса, Параметры);
	Ошибка = "";
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 start
Функция ВернутьТекстЗапроса(СтрокаР, Параметры, ПериодДата, ПоляНабораДанных, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница)
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		ТекстЗапроса = "INSERT INTO " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + " (*)";
		ТекстЗапросаПоля = " VALUES " + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		ТекстЗапроса = "INSERT INTO " + Параметры.ИмяТаблицыТранслит + "";
		ТекстЗапросаПоля = " VALUES " + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница) + "";
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		ТекстЗапроса = "INSERT INTO " + Параметры.ИмяТаблицыТранслит + "";
		ТекстЗапросаПоля = " VALUES " + ВернутьЗначенияЗапрос(СтрокаР, Параметры, ПериодДата, МассивПолей, МассивПолейЗапрос, ИндексацияТЗ, ЕстьРазница) + "";
	Иначе
	КонецЕсли;
	Ошибка = "";
	ТекстДляЗапроса = ТекстЗапроса + " " + ТекстЗапросаПоля + ";";
	Возврат ТекстДляЗапроса;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 end																				  
						
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start										   
Функция ПолучитьДатуВремяISO8601(ПараметрДата, ДобавитьКовычку = Истина) 
	
	ПериодДень = День(ПараметрДата);
	ПериодМесяц = Месяц(ПараметрДата);
	ПериодГод = Год(ПараметрДата);
	ПериодЧас = Час(ПараметрДата);
	ПериодМинута = Минута(ПараметрДата);
	ПериодСекунда = Секунда(ПараметрДата);
	
	Возврат ?(ДобавитьКовычку,"'","") + ВернутьЧислоБезПробелов(ПериодГод, Истина) + "-" + ВернутьЧислоБезПробеловСНулями(ПериодМесяц) + "-" + ВернутьЧислоБезПробеловСНулями(ПериодДень) + " " + ВернутьЧислоБезПробеловСНулями(ПериодЧас) + ":" + ВернутьЧислоБезПробеловСНулями(ПериодМинута) + ":" + ВернутьЧислоБезПробеловСНулями(ПериодСекунда) + ?(ДобавитьКовычку,"'",""); 
КонецФункции 
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start										   
Функция ПолучитьДатуISO8601(ПараметрДата, ДобавитьКовычку = Истина) 
	
	ПериодДень = День(ПараметрДата);
	ПериодМесяц = Месяц(ПараметрДата);
	ПериодГод = Год(ПараметрДата);
	ПериодЧас = Час(ПараметрДата);
	ПериодМинута = Минута(ПараметрДата);
	ПериодСекунда = Секунда(ПараметрДата);
	
	Возврат ?(ДобавитьКовычку,"'","") + ВернутьЧислоБезПробелов(ПериодГод, Истина) + "-" + ВернутьЧислоБезПробеловСНулями(ПериодМесяц) + "-" + ВернутьЧислоБезПробеловСНулями(ПериодДень) + ?(ДобавитьКовычку,"'",""); 
КонецФункции 
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start																					   
Функция ПолучитьUnixTS(ПараметрДата) 
	Возврат ВернутьЧислоБезПробелов(УниверсальноеВремя(ПараметрДата) - '19700101'); 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start																						
Функция ВернутьЧислоБезПробелов(ЧислоИзСтроки = 0, ЭтоГод = Ложь)
	Если ЭтоГод Тогда
		СтрокаЧисло = Формат(ЧислоИзСтроки, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=0");
	Иначе
		СтрокаЧисло = Формат(ЧислоИзСтроки, "ЧН=0; ЧГ=0; ЧРД=.");
	КонецЕсли;
	
	СтрокаЧисло = Строка(СтрокаЧисло);
	СтрокаЧисло = СокрЛП(СтрокаЧисло);
	СтрокаЧисло = СтрЗаменить(СтрокаЧисло, Символы.НПП, "");
	//СтрокаЧисло = СтрЗаменить(СтрокаЧисло, ",", "");

	Возврат СтрокаЧисло; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start
Функция ВернутьЧислоБезПробеловСНулями(ЧислоИзСтроки)
	Возврат Формат(ЧислоИзСтроки, "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0");
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 start	  
Функция НайтиПолейВМассиве(МассивП, Поле)
	Для каждого СтрокаМ из МассивП Цикл
		Если СтрокаМ = Поле Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-08-2025 9:30 start	  
Функция НайтиИндексПоляВМассиве(МассивП, Поле)
	Индекс = 0;
	Для каждого СтрокаМ из МассивП Цикл
		Если СтрокаМ = Поле Тогда
			Возврат Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат -1;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 start	 
Функция ВернутьМассивПорядокПериодИзРезультатаЗапроса(РезультатЗапроса, ДополнительныеПараметры, ИмяПоля = "Поле")
	М = Новый Массив;
	Если ДополнительныеПараметры.ТипБазы = "MySQL" Тогда
		М.Добавить("ДатаОбновленияЗаписи");
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ИмяПериод = "Период"; 	
		М.Добавить(ИмяПериод);
	КонецЕсли;
	Для каждого Колонка из РезультатЗапроса.Колонки Цикл
		М.Добавить(Колонка[ИмяПоля]);
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 9:30 start	 
Функция ВернутьМассивПорядокПериодИзКолонокЗапроса(ЗапросКолонки, ДополнительныеПараметры)
	М = Новый Массив;
	Если ДополнительныеПараметры.ТипБазы = "MySQL" Тогда
		М.Добавить("ДатаОбновленияЗаписи");
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ИмяПериод = "Период"; 	
		М.Добавить(ИмяПериод);
	КонецЕсли;
	Для каждого Колонка из ЗапросКолонки Цикл
		М.Добавить(Колонка.Имя);
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 01-11-2023 9:30 start																					   
Функция ВернутьМассивПорядокИзРезультатаЗапроса(РезультатЗапроса)
	М = Новый Массив;
	Для каждого Колонка из РезультатЗапроса.Колонки Цикл
		М.Добавить(Колонка.Имя);
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start
Функция ВернутьМассивПорядокПериодИзНабораДанных(ПоляНабораДанных, ДополнительныеПараметры, ИмяПоля = "Поле")
	М = Новый Массив;
	Если ДополнительныеПараметры.ТипБазы = "MySQL" Тогда
		М.Добавить("ДатаОбновленияЗаписи");
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ИмяПериод = "Период"; 	
		М.Добавить(ИмяПериод);
	КонецЕсли;
	Для каждого Поле из ПоляНабораДанных Цикл
		М.Добавить(Поле[ИмяПоля]);
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start			 
Функция ВернутьМассивПолейКлючейПериодИзНабораДанных(ПоляНабораДанных, ДополнительныеПараметры, ИмяПоля = "Поле")
	М = Новый Массив;
	МассивДополнительныеКлючи = Новый Массив;
	Если ДополнительныеПараметры.ИспользоватьДополнительныеКлючи
		ИЛИ ДополнительныеПараметры.ИспользоватьТолькоДополнительныеКлючи Тогда
		МассивДополнительныеКлючи = ПолучитьМассивДополнительныхКлючей();
	КонецЕсли;
	//Если ДополнительныеПараметры.ТипБазы = "MySQL" Тогда
	//	М.Добавить("ДатаОбновленияЗаписи");
	//КонецЕсли;
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ИмяПериод = "Период"; 	
		М.Добавить(ИмяПериод);
	КонецЕсли;
	Для каждого ПолеНабора из ПоляНабораДанных Цикл
		ДобавитьПоле = Ложь;
		Если МассивДополнительныеКлючи.Количество() > 0 Тогда
			ДобавитьПоле = ЭтоЗначениеЕстьВМассиве(МассивДополнительныеКлючи, ПолеНабора[ИмяПоля]);
		КонецЕсли;
		Если ДополнительныеПараметры.ИспользоватьТолькоДополнительныеКлючи Тогда
			//
		Иначе
			Если ТипЗнч(ПолеНабора.ТипЗначения) = Тип("ОписаниеТипов") Тогда
				Если Строка(ПолеНабора.ТипЗначения) = "Число" Тогда
					//ДобавитьПоле = Истина";
				ИначеЕсли Строка(ПолеНабора.ТипЗначения) = "Дата" 
					И ПолеНабора[ИмяПоля] = "Период" Тогда
					ДобавитьПоле = Истина;
				ИначеЕсли Строка(ПолеНабора.ТипЗначения) = "Дата" Тогда
					//ДобавитьПоле = Истина;
				ИначеЕсли Строка(ПолеНабора.ТипЗначения) = "Строка" Тогда
					//ДобавитьПоле = Истина;
				//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 07-06-2024 9:30 start
				ИначеЕсли Строка(ПолеНабора.ТипЗначения) = "Булево" Тогда
					//ДобавитьПоле = Истина;
				//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 07-06-2024 9:30 end
				Иначе
					ДобавитьПоле = Истина;
				КонецЕсли;
			Иначе
				ДобавитьПоле = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьПоле Тогда
			М.Добавить(ПолеНабора[ИмяПоля]);	
		КонецЕсли;
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-05-2025 9:30 start
Функция ЭтоЗначениеЕстьВМассиве(МассивМ, ПолеПоиска)
	Индекс = МассивМ.Найти(ПолеПоиска);
	Если Индекс <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-05-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 07-07-2025 9:30 start
Функция ПолучитьМассивДополнительныхКлючей() Экспорт
	МассивМ = Новый Массив;
	//
	Если СтрДлина(ЭтотОбъект.ДополнительныеКлючи) > 0 Тогда
		МассивМ = СтрРазделитьРасширенная(ЭтотОбъект.ДополнительныеКлючи, ";");	
	Иначе
		МассивМ.Добавить("База");
		МассивМ.Добавить("НомерГТД");
		МассивМ.Добавить("Серия");
		МассивМ.Добавить("НомерСтроки");
		МассивМ.Добавить("СсылкаGUID");
		МассивМ.Добавить("РасчетныйСчет");
		МассивМ.Добавить("Валюта");
	КонецЕсли;
	//
	Возврат МассивМ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 07-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 start
Функция ВернутьМассивПорядокИзНабораДанных(ПоляНабораДанных)
	М = Новый Массив;
	Для каждого Поле из ПоляНабораДанных Цикл
		М.Добавить(Поле.Поле);
	КонецЦикла;
	Возврат М;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 03-11-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2024 9:30 start
Функция ПолучитьHTTPСоединение(Параметры)
	
	Если Параметры.ЭтоЗащищенноеСоединение Тогда
		Если Параметры.ПутьДоСертификата <> "" Тогда
			SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровФайл(Параметры.ПутьДоСертификата));
		Иначе
			SSL = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows(), Новый СертификатыУдостоверяющихЦентровWindows());
		КонецЕсли;
		Если Параметры.ТипБазы = "REST" Тогда
			Соединение = Новый HTTPСоединение(Параметры.Адрес, Параметры.Порт,,,,,SSL);
		Иначе
			Соединение = Новый HTTPСоединение(Параметры.Адрес, Параметры.Порт, Параметры.Логин, Параметры.Пароль,,,SSL);
		КонецЕсли;		
	Иначе
		Если Параметры.ТипБазы = "REST" Тогда
			Соединение = Новый HTTPСоединение(Параметры.Адрес, Параметры.Порт);
		Иначе
			Соединение = Новый HTTPСоединение(Параметры.Адрес, Параметры.Порт, Параметры.Логин, Параметры.Пароль);
		КонецЕсли;
	КонецЕсли;	
	Возврат Соединение; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2024 9:30 end

Функция СтруктураURI(СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start																					
Функция ЕстьБазаВClickHouse(ИмяБазы, Параметры)
	Запрос = "SELECT name, comment FROM system.databases WHERE name = '" + Параметры.ИмяБазы + "';";
	//
	Соединение = ПолучитьHTTPСоединение(Параметры);
	HTTPЗапрос = Новый HTTPЗапрос("?query="+Запрос);
	Результат = Соединение.Получить(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Если ЭтоОшибкаЗапросаClickHouseDB(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТекстОтвета <> "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start																					
Функция ЕстьБазаВPostgreSQL(ИмяБазы, Параметры)
	ТекстЗапрос = "SELECT 1 FROM pg_database WHERE datname = '" + Параметры.ИмяБазы + "';";
	//
	ТекстОтвета = ВыполнитьЗапросGET_PostgreSQL(ТекстЗапрос, Параметры, "get");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаPostgreSQL(ТекстОтвета);
	Если КодРасшифровкиОтвета >= 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start																					
Функция ЕстьБазаВ(ИмяБазы, Параметры)
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		Возврат ЕстьБазаВClickHouse(ИмяБазы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		Возврат ЕстьБазаВPostgreSQL(ИмяБазы, Параметры);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end
																				  
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start 
Функция ТекстЗапросаСозданиеБазыДанных(Параметры)
	ТекстЗапроса = "";
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		ТекстЗапроса = "CREATE DATABASE " + Параметры.ИмяБазы + " COMMENT 'The Metrics database';";
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		ТекстЗапроса = "CREATE DATABASE " + Параметры.ИмяБазы + " COMMENT 'The Metrics database';";
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		ТекстЗапроса = "CREATE DATABASE " + Параметры.ИмяБазы + " COMMENT 'The Metrics database';";
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start									   
Функция ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанных(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ = "Поле")
	ТекстЗапроса = "";
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхClickHouseDB(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхPostgreSQL(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхMySQL(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ);
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	Возврат ТекстЗапроса;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start
Функция ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхClickHouseDB(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ)
	ТекстЗапроса = "CREATE TABLE " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + "";
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + " (" + Транслит("Период") + " Datetime,";	
	Иначе
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + " (";
	КонецЕсли;
	Счетчик = 1;
	Количество = ПоляМакета.Количество();
	Для каждого ПолеМ из ПоляМакета Цикл
		Если Счетчик < Количество Тогда 
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " " + Транслит(ПолеМ[ИмяПоляМ]) + " " + ПолучитьТипПоляНабораClickHouseDB(ПолеМ) + ",";
		Иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + " " + Транслит(ПолеМ[ИмяПоляМ]) + " " + ПолучитьТипПоляНабораClickHouseDB(ПолеМ);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ")";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ENGINE = ReplacingMergeTree";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "PRIMARY KEY (" + ПолучитьКлючИзМассива(ПоляКлючи) + ")";
	
	Возврат ТекстЗапроса;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start
Функция ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхPostgreSQL(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ)
	ТекстЗапроса = "CREATE TABLE " + Параметры.ИмяТаблицыТранслит + "";
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + " (" + Транслит("Период") + " timestamp without time zone,";	
	Иначе
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + " (";
	КонецЕсли;
	Счетчик = 1;
	Количество = ПоляМакета.Количество();
	Для каждого ПолеМ из ПоляМакета Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + " " + Транслит(ПолеМ[ИмяПоляМ]) + " " + ПолучитьТипПоляНабораPostgreSQL(ПолеМ) + ",";
	КонецЦикла;
	СтрокаИзМассивКлючей = ПолучитьКлючИзМассива(ПоляКлючи);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "CONSTRAINT "+ Параметры.ИмяТаблицыТранслит +"_pkey PRIMARY KEY (" + СтрокаИзМассивКлючей + ")";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ");";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "CREATE UNIQUE INDEX UNIQUE_" + Параметры.ИмяТаблицыТранслит + "";
	ТекстЗапроса = ТекстЗапроса + " ON " + Параметры.ИмяТаблицыТранслит + "";
	ТекстЗапроса = ТекстЗапроса + " (" + СтрокаИзМассивКлючей + ");";
	
	
	Возврат ТекстЗапроса;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start
Функция ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанныхMySQL(Параметры, ПараметрыМакета, ПоляМакета, ПоляКлючи, ДополнительныеПараметры, ИмяПоляМ)
	ТекстЗапроса = "CREATE TABLE `" + Параметры.ИмяТаблицыТранслит + "`";
	Счетчик = 1;
	Количество = ПоляМакета.Количество();
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + " (";
	ТекстЗапроса = ТекстЗапроса + " `" + Транслит("ДатаОбновленияЗаписи") + "` datetime,";
	Если ДополнительныеПараметры.ИспользоватьПериодВКлюче Тогда
		ТекстЗапроса = ТекстЗапроса + "`" + Транслит("Период") + "` datetime,";	
	КонецЕсли;
	Для каждого ПолеМ из ПоляМакета Цикл
		ТекстЗапроса = ТекстЗапроса + " `" + Транслит(ПолеМ[ИмяПоляМ]) + "` " + ПолучитьТипПоляНабораMySQL(ПолеМ) + ",";
	КонецЦикла;
	СтрокаИзМассивКлючей = ПолучитьКлючИзМассива(ПоляКлючи, "", 1100, 50);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "CONSTRAINT "+ Параметры.ИмяТаблицыТранслит +"_pkey UNIQUE (" + СтрокаИзМассивКлючей + ")";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ")";
	ТекстЗапроса = ТекстЗапроса + " ENGINE=InnoDB DEFAULT CHARSET=utf8;";
	
	Возврат ТекстЗапроса;	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start								  
Функция ПолучитьКлючИзМассива(МассивЗначений, Префикс = "", ДлинаИндексаБайт = 0, ДлинаЗначенияДляИндекса = 0)
	СтрокаМассив = Префикс + ПолучитьЗначениеИндексаСДлинойБайт(МассивЗначений[0], ДлинаЗначенияДляИндекса);
	Количество = МассивЗначений.Количество();
	Счетчик = 1;
	ДлинаИндексаБайтТекущая = ?(ДлинаЗначенияДляИндекса > 0, ДлинаЗначенияДляИндекса, 255);
	СчетчикДлинаИндексаБайт = ДлинаИндексаБайтТекущая;
	Для каждого ЗначениеМ из МассивЗначений Цикл
		Если Счетчик > 1 Тогда
			Если ДлинаИндексаБайт > 0 Тогда
				Если СчетчикДлинаИндексаБайт + ДлинаИндексаБайтТекущая > ДлинаИндексаБайт Тогда
					Прервать;
				Иначе
					СтрокаМассив = ПолучитьДополненныйКлючМ(СтрокаМассив, Префикс, ЗначениеМ, ДлинаЗначенияДляИндекса);	
				КонецЕсли;
			Иначе
				СтрокаМассив = ПолучитьДополненныйКлючМ(СтрокаМассив, Префикс, ЗначениеМ, ДлинаЗначенияДляИндекса);
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат СтрокаМассив;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end

////<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 9:30 start								  
Функция ПолучитьСтрокуАпостроф(СтрокаЗначение)
	СтрокаЗначение = "`" + СтрокаЗначение + "`";
	
	Возврат СтрокаЗначение;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 9:30 end
//
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 9:30 start								  
Функция ПолучитьМассивЗначенийВСтрокуАпостроф(МассивЗначений, ДелатьТранслит = Истина, ДелатьАпостроф = Истина)
	СтрокаМассив = "";
	Если ДелатьАпостроф Тогда
		СтрокаМассив = ПолучитьСтрокуАпостроф(?(ДелатьТранслит, Транслит(МассивЗначений[0]), МассивЗначений[0]));
	Иначе
		СтрокаМассив = ?(ДелатьТранслит, Транслит(МассивЗначений[0]), МассивЗначений[0]);
	КонецЕсли;
	
	Количество = МассивЗначений.Количество();
	Счетчик = 1;
	Для каждого ЗначениеМ из МассивЗначений Цикл
		Если Счетчик > 1 Тогда
			Если ДелатьАпостроф Тогда
				СтрокаМассив = СтрокаМассив + ", " + ПолучитьСтрокуАпостроф(?(ДелатьТранслит, Транслит(ЗначениеМ), ЗначениеМ));
			Иначе
				СтрокаМассив = СтрокаМассив + ", " + ?(ДелатьТранслит, Транслит(ЗначениеМ), ЗначениеМ);
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;	
	КонецЦикла;
	Возврат СтрокаМассив;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 15-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 start								  
Функция ПолучитьКолонкиДляUpdateMySQL(МассивЗначений)
	СтрокаКолонки = "" + УстановитьЗначениеСУчетомДатаОбновленияЗаписиДляUpdateMySQL(МассивЗначений[0], МассивЗначений[0]);
	Счетчик = 1;
	Для каждого СтрокаМ из МассивЗначений Цикл
		Если Счетчик > 1 Тогда
			СтрокаКолонки = СтрокаКолонки + ", " + УстановитьЗначениеСУчетомДатаОбновленияЗаписиДляUpdateMySQL(СтрокаМ, СтрокаМ);
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат СтрокаКолонки;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 start								  
Функция УстановитьЗначениеСУчетомДатаОбновленияЗаписиДляUpdateMySQL(ИмяКолонки, ЗначениеМ)
	
	Если ИмяКолонки = "ДатаОбновленияЗаписи" Тогда
		//ЗначениеМ = ПолучитьСтрокуАпостроф(Транслит(ЗначениеМ)) + " = VALUES(NOW())";
		ЗначениеМ = ПолучитьСтрокуАпостроф(Транслит(ЗначениеМ)) + " = VALUES(" + ПолучитьСтрокуАпостроф(Транслит(ЗначениеМ)) + ")";
	Иначе
		ЗначениеМ = ПолучитьСтрокуАпостроф(Транслит(ЗначениеМ)) + " = VALUES(" + ПолучитьСтрокуАпостроф(Транслит(ЗначениеМ)) + ")";
	КонецЕсли;
	
	Возврат ЗначениеМ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start
Функция ПолучитьДополненныйКлючМ(КлючМ, Префикс, КлючС, ДлинаЗначенияДляИндекса)
	Возврат КлючМ + "," + Префикс + ПолучитьЗначениеИндексаСДлинойБайт(КлючС, ДлинаЗначенияДляИндекса);
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 start
Функция ПолучитьЗначениеИндексаСДлинойБайт(КлючС, ДлинаЗначенияДляИндекса)
	Если ПоискДатыПоТекстуСтроки(КлючС) Тогда
		Возврат Транслит(КлючС);
	Иначе
		Если ДлинаЗначенияДляИндекса > 0 Тогда
			Возврат Транслит(КлючС)+"(" + ДлинаЗначенияДляИндекса + ")";
		Иначе
			Возврат Транслит(КлючС);
		КонецЕсли;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 start
Функция ПоискДатыПоТекстуСтроки(СтрокаДата)
	Если СтрНайти(СтрокаДата, "Период") > 0 Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(СтрокаДата, "ДатаОбновленияЗаписи") > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 11-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 start								  
Функция ПолучитьТипПоляНабора(ПолеНабора, Параметры)
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		Возврат ПолучитьТипПоляНабораClickHouseDB(ПолеНабора);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		Возврат ПолучитьТипПоляНабораPostgreSQL(ПолеНабора);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		Возврат ПолучитьТипПоляНабораMySQL(ПолеНабора);
	Иначе
		Возврат ПолучитьТипПоляНабораClickHouseDB(ПолеНабора);
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 start								  
Функция ПолучитьТипПоляНабораPostgreSQL(ПолеНабора)
	
	Если ТипЗнч(ПолеНабора.ТипЗначения) = Тип("ОписаниеТипов") Тогда
		СтрокаПолеНабораТипЗначения = ВернутьСтрокаПолеНабораТипЗначения(ПолеНабора.ТипЗначения);
		Если СтрокаПолеНабораТипЗначения = "Число" Тогда
			Возврат "double precision DEFAULT 0";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Дата" Тогда
			Возврат "timestamp without time zone";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Строка" Тогда
			Возврат "character varying(255) DEFAULT ' '::character varying";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Булево" Тогда
			Возврат "bigint DEFAULT 0";
		Иначе
			Возврат "character varying(255) DEFAULT ' '::character varying";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "character varying(255) DEFAULT ' '::character varying";
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 start								  
Функция ПолучитьТипПоляНабораMySQL(ПолеНабора)
	
	Если ТипЗнч(ПолеНабора.ТипЗначения) = Тип("ОписаниеТипов") Тогда
		СтрокаПолеНабораТипЗначения = ВернутьСтрокаПолеНабораТипЗначения(ПолеНабора.ТипЗначения);
		Если СтрокаПолеНабораТипЗначения = "Число" Тогда
			Возврат "decimal(17,10)";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Дата" Тогда
			Возврат "datetime";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Строка" Тогда
			Возврат "varchar(255)";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Булево" Тогда
			Возврат "int";
		Иначе
			Возврат "varchar(255)";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "varchar(255)";
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 start								  
Функция ПолучитьТипПоляНабораClickHouseDB(ПолеНабора)
	
	Если ТипЗнч(ПолеНабора.ТипЗначения) = Тип("ОписаниеТипов") Тогда
		СтрокаПолеНабораТипЗначения = ВернутьСтрокаПолеНабораТипЗначения(ПолеНабора.ТипЗначения);
		Если СтрокаПолеНабораТипЗначения = "Число" Тогда
			Возврат "Decimal128(18)";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Дата" Тогда
			Возврат "Datetime";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Строка" Тогда
			Возврат "String";
		ИначеЕсли СтрокаПолеНабораТипЗначения = "Булево" Тогда
			Возврат "Int";
		Иначе
			Возврат "String";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "String";
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 start
Функция ВернутьСтрокаПолеНабораТипЗначения(ПолеНабораТипЗначения)
	СтрокаРезультат = Строка(ПолеНабораТипЗначения);
	
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, "Null", "");
	СтрокаРезультат = СтрЗаменить(СтрокаРезультат, ",", "");
	СтрокаРезультат = СокрЛ(СтрокаРезультат);
	СтрокаРезультат = СокрП(СтрокаРезультат);
	
	Возврат СтрокаРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start									
Функция ВыполнитьЗапросPOST_ClickHouseDB(ТекстЗапроса, Параметры)
	Запрос = ТекстЗапроса;
	//
	Соединение = ПолучитьHTTPСоединение(Параметры);
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент();
	ТекстовыйФайл.УстановитьТекст(Запрос);
	ТекстовыйФайл.Записать(ФайлЗапроса,КодировкаТекста.UTF8);
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.УстановитьИмяФайлаТела(ФайлЗапроса);
	Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Если ЭтоОшибкаЗапросаClickHouseDB(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ВРег(ТекстОтвета), "OK") > 0
		ИЛИ ВРег(ТекстОтвета) = "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 start									
Функция ВыполнитьЗапросPOST_REST(ТекстЗапроса, Параметры)
	Запрос = ТекстЗапроса;
	//
	СтруктураURI = СтруктураURI(Параметры.Адрес);
	Параметры.Вставить("Адрес", СтруктураURI.Хост);
	//
	Соединение = ПолучитьHTTPСоединение(Параметры);
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(Запрос);
	ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
	//
	Basic = Параметры.Логин + ":" + Параметры.Пароль;
	Basic = Base64Строка(ПолучитьДвоичныеДанныеИзСтроки(Basic));	
	//
	Заголовки = Новый Соответствие;
	Если Параметры.ФорматДанных = "CSV_WH"
		ИЛИ Параметры.ФорматДанных = "CSV" Тогда
		Заголовки.Вставить("Content-type", "text/csv");
	ИначеЕсли Параметры.ФорматДанных = "JSON" Тогда
		Заголовки.Вставить("Content-type", "text/json; charset=utf-8");
		Заголовки.Вставить("Accept","text/json");
	ИначеЕсли Параметры.ФорматДанных = "XML" Тогда
		Заголовки.Вставить("Content-type", "text/xml");
		Заголовки.Вставить("Accept","text/xml");
	Иначе
		Заголовки.Вставить("Content-type", "text/csv");
	КонецЕсли;
	
	Заголовки.Вставить("Authorization", "Basic " + Basic);
	Заголовки.Вставить("guid", Параметры.ИдентификаторВыгрузки);
	Заголовки.Вставить("table-name", Параметры.ИмяТаблицыТранслит);
	Заголовки.Вставить("count-queries", Параметры.КоличествоЗапросов);
	Заголовки.Вставить("index-query", Параметры.ИндексЗапроса);
	Заголовки.Вставить("count-rows", Параметры.КоличествоЗаписей);
	Заголовки.Вставить("index-row", Параметры.ИндексЗаписи);
	//
	ПараметрыСтрока = "";
	Если Параметры.ВключитьПараметрыЗапросаREST Тогда
		ПараметрыСтрока = "?guid=" + Параметры.ИдентификаторВыгрузки +
		"&table=" + Параметры.ИмяТаблицыТранслит +
		"&count-queries=" + Параметры.КоличествоЗапросов +
		"&index-query=" + Параметры.ИндексЗапроса +
		"&count-rows=" + Параметры.КоличествоЗаписей +
		"&index-row=" + Параметры.ИндексЗаписи;
	КонецЕсли;
	//
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + ПараметрыСтрока, Заголовки);
	
	HTTPЗапрос.УстановитьИмяФайлаТела(ФайлЗапроса);
	Если Параметры.ФорматДанных = "JSON" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Если ЭтоОшибкаЗапросаREST(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ВРег(ТекстОтвета), "OK") > 0
		ИЛИ ВРег(ТекстОтвета) = "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start
Функция ПолучитьРасширениеФайлаИзПараметровЗапроса(Параметры)
	Если Параметры.ФорматДанных = "CSV_WH" Тогда
		Возврат ".csv";
	ИначеЕсли Параметры.ФорматДанных = "CSV" Тогда
		Возврат ".csv";
	ИначеЕсли Параметры.ФорматДанных = "JSON" Тогда
		Возврат ".json";
	ИначеЕсли Параметры.ФорматДанных = "XML" Тогда
		Возврат ".xml";
	ИначеЕсли Параметры.ФорматДанных = "XLS" Тогда
		Возврат ".xls";
	ИначеЕсли Параметры.ФорматДанных = "XLSX" Тогда
		Возврат ".xlsx";
	Иначе
		Возврат ".txt";
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start
Функция ВернутьТаблицуЗначенийИзCSV(ПутьКФайлу, ИндексШапки = 0, Разделитель = ",")
	ПрочитанныйФайл = Новый ТекстовыйДокумент;
    ПрочитанныйФайл.Прочитать(ПутьКФайлу);
    ПрочитанныйФайл_КоличествоСтрок = ПрочитанныйФайл.КоличествоСтрок();
    ДанныеИзФайла = Новый ТаблицаЗначений;
    Если ИндексШапки > 0 Тогда
	    Шапка = ПрочитанныйФайл.ПолучитьСтроку(ИндексШапки);
	    МассивКолонок = СтрРазделить(Шапка, Разделитель);
	    //
	    Для каждого СтрокаМ из МассивКолонок Цикл
	    	ИмяКолонки = СтрЗаменить(СтрокаМ, " ", "");
	    	ДанныеИзФайла.Колонки.Добавить(ИмяКолонки, , СтрокаМ);
	    КонецЦикла;
    КонецЕсли;
    Для НомерСтроки = ИндексШапки + 1 По ПрочитанныйФайл_КоличествоСтрок Цикл
    	Строка = ПрочитанныйФайл.ПолучитьСтроку(НомерСтроки);
		МассивКолонокСтроки = СтрРазделить(Строка, Разделитель);
		НоваяСтрока = ДанныеИзФайла.Добавить();
		МассивКолонокСтроки_Количество = МассивКолонокСтроки.Количество();
		Для НомерСтолбца = 1 по МассивКолонокСтроки_Количество Цикл
			ТекущееЗначение = МассивКолонокСтроки[НомерСтолбца - 1];
			ИмяКолонки = ДанныеИзФайла.Колонки[НомерСтолбца - 1].Имя;
			НоваяСтрока[ИмяКолонки] = ТекущееЗначение;
		КонецЦикла;
    КонецЦикла;
    Возврат ДанныеИзФайла;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 start									
Функция ВыполнитьЗапросPOST_Local(ТекстЗапроса, Параметры, ТаблицаЗначенийЗапроса = Неопределено)
	Запрос = ТекстЗапроса;
	//
	СтрокаПериодДата = "";
	Если Параметры.ЕстьДатаВПараметрахЗапроса Тогда
		СтрокаПериодДата = "_" + ПолучитьДатуISO8601(Параметры.ПериодДата, Ложь);
	КонецЕсли;
	РасширениеФайла = ПолучитьРасширениеФайлаИзПараметровЗапроса(Параметры);
	ЕстьСимволСлешНаправо = Ложь;
	Если СтрНайти(Параметры.Адрес, "/") Тогда
		ЕстьСимволСлешНаправо = Истина;
	КонецЕсли;
	//
	ПутьКПапке = Параметры.Адрес + ?(ЕстьСимволСлешНаправо, "/", "\") + Параметры.ИмяТаблицыТранслит + ?(ЕстьСимволСлешНаправо, "/", "\");
	ИмяФайла = Параметры.ИмяТаблицыТранслит + СтрокаПериодДата + РасширениеФайла;
	//
	ФайлЗапроса = ПолучитьИмяВременногоФайла();
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(Запрос);
	ТекстовыйФайл.Записать(ФайлЗапроса, КодировкаТекста.UTF8);
	//
	КаталогНаДиске = Новый Файл(ПутьКПапке);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьКПапке);
	КонецЕсли;
	Если Параметры.ФорматДанных = "XLS"
		ИЛИ Параметры.ФорматДанных = "XLSX" Тогда
		СохранитьТаблицуЗначенийВExcel(ТаблицаЗначенийЗапроса, ПутьКПапке + ИмяФайла, Параметры.ФорматДанных);
	Иначе
		Данные = Новый ДвоичныеДанные(ФайлЗапроса);
		АдресВХ = ПоместитьВоВременноеХранилище(Данные);
		ДанныйФайлНастройки = ПолучитьИзВременногоХранилища(АдресВХ);
		//
		Если ДанныйФайлНастройки <> Неопределено Тогда
			ДанныйФайлНастройки.Записать(ПутьКПапке + ИмяФайла);
		Иначе
			Возврат Ложь;
		КонецЕсли;
    КонецЕсли;
	//
	Возврат Истина;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 9:30 end

Функция НотацияА1(НомерСтроки, НомерСтолбца)
	//A=65, Z=90, 26 символов на одну букву
	НомерСтолбца = Мин(НомерСтолбца, 26);
	Возврат (Символ(64+НомерСтолбца)+Формат(НомерСтроки,"ЧГ=0"));	
	
КонецФункции

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-09-2025 9:30 start									
Функция ВыполнитьЗапросPOST_GoogleSheets(ТекстЗапроса, Параметры, ТаблицаЗначенийЗапроса = Неопределено, МассивПолей)
	//sheets.googleapis.com
	//
	МакетПодписиДвоичный = ЭтотОбъект.ПолучитьМакет("GoogleServiceJSON");

	СтруктураСертификата = Новый Структура;
	жсон = Новый ЧтениеJSON;
	жсон.УстановитьСтроку(ПолучитьСтрокуИзДвоичныхДанных(МакетПодписиДвоичный));
	Пока жсон.Прочитать() Цикл
		Если жсон.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = жсон.ТекущееЗначение;
			жсон.Прочитать();
			ЗначениеСвойства =  жсон.ТекущееЗначение;
			СтруктураСертификата.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
	КонецЦикла;
	РасшаритьДляЕмейла = СтруктураСертификата.client_email;

	КлючСтрока = СтруктураСертификата.private_key;
	КлючСтрока = СтрЗаменить(КлючСтрока, "-----BEGIN PRIVATE KEY-----", "");
	КлючСтрока = СтрЗаменить(КлючСтрока, "-----END PRIVATE KEY-----", "");
	ХексСтрокаКлюча = ПолучитьHexСтрокуИзДвоичныхДанных(Base64Значение(КлючСтрока));
	Тэги = Новый Соответствие;
	Тэги.Вставить("30", "SEQUENCE");
	Тэги.Вставить("02", "INTEGER");
	Тэги.Вставить("06", "OBJECT IDENTIFIER");
	Тэги.Вставить("04", "OCTET STRING");
	Тэги.Вставить("05", "NULL");

	ДлинаАдресаОдинБайт = "81";
	ДлинаАдресаДваБайта = "82";

	парс = Новый ДеревоЗначений;
	парс.Колонки.Добавить("Класс", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(2)));
	парс.Колонки.Добавить("ИмяКласса", Новый ОписаниеТипов("Строка"));
	парс.Колонки.Добавить("ПредбайтДлины", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(2)));
	парс.Колонки.Добавить("БайтДлины", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(4)));
	парс.Колонки.Добавить("ДлинаЧисло", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0)));
	парс.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));

	СтрокаOCTET_STRING = Неопределено; //в октетстринг лежит RSAPrivateKey по RFC 3447
	ПарсХекс(парс, ХексСтрокаКлюча, СтрокаOCTET_STRING);
	//ЗначениеВРеквизитФормы(парс, "ПарсКлюч");

	RSAPrivateKey_SEQUENCE = СтрокаOCTET_STRING.Строки[0];
	// единственный элемент внутри OCTET_STRING, является RSAPrivateKey ::= SEQUENCE {...
	PKey_SEQUENCE_fields = RSAPrivateKey_SEQUENCE.Строки;
	
	//PKey_SEQUENCE_fields[0] - version не нужна
	СтруктураСертификата.Вставить("Modulus", PKey_SEQUENCE_fields[1].Значение);
	СтруктураСертификата.Вставить("Exponent", PKey_SEQUENCE_fields[2].Значение);
	СтруктураСертификата.Вставить("D", PKey_SEQUENCE_fields[3].Значение);
	СтруктураСертификата.Вставить("P", PKey_SEQUENCE_fields[4].Значение);
	СтруктураСертификата.Вставить("Q", PKey_SEQUENCE_fields[5].Значение);
	СтруктураСертификата.Вставить("DP", PKey_SEQUENCE_fields[6].Значение);
	СтруктураСертификата.Вставить("DQ", PKey_SEQUENCE_fields[7].Значение);
	СтруктураСертификата.Вставить("InverseQ", PKey_SEQUENCE_fields[8].Значение);

	//Возврат СтруктураСертификата;
	
	//RFC 3447
   // A.1.2 RSA private key syntax

   //An RSA private key should be represented with the ASN.1 type
   //RSAPrivateKey:

   //   RSAPrivateKey ::= SEQUENCE {
   //  0     version           Version,
   //  1     modulus           INTEGER,  -- n
   //  2     publicExponent    INTEGER,  -- e
   //  3     privateExponent   INTEGER,  -- d
   //  4     prime1            INTEGER,  -- p
   //  5     prime2            INTEGER,  -- q
   //  6     exponent1         INTEGER,  -- d mod (p-1)
   //  7     exponent2         INTEGER,  -- d mod (q-1)
   //  8     coefficient       INTEGER,  -- (inverse of q) mod p
   //  9     otherPrimeInfos   OtherPrimeInfos OPTIONAL
   //   }

   //The fields of type RSAPrivateKey have the following meanings:

   // * version is the version number, for compatibility with future
   //   revisions of this document.  It shall be 0 for this version of the
   //   document, unless multi-prime is used, in which case it shall be 1.

   //         Version ::= INTEGER { two-prime(0), multi(1) }
   //            (CONSTRAINED BY
   //            {-- version must be multi if otherPrimeInfos present --})

   // * modulus is the RSA modulus n.

   // * publicExponent is the RSA public exponent e.

   // * privateExponent is the RSA private exponent d.

   // * prime1 is the prime factor p of n.

   // * prime2 is the prime factor q of n.

   // * exponent1 is d mod (p - 1).

   // * exponent2 is d mod (q - 1).

   // * coefficient is the CRT coefficient q^(-1) mod p.

   // * otherPrimeInfos contains the information for the additional primes
   //   r_3, ..., r_u, in order.  It shall be omitted if version is 0 and
   //   shall contain at least one instance of OtherPrimeInfo if version
   //   is 1.
	
	//
	
	СтруктураДляЖсон = Новый Структура;
	СтруктураДляЖсон.Вставить("alg", "RS256");
	СтруктураДляЖсон.Вставить("typ", "JWT");
	жсон = Новый ЗаписьJson;
	жсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(жсон, СтруктураДляЖсон);
	СтрокаЖсонХедер = жсон.Закрыть();
	
	Хедер64 = Base64Url(ПолучитьДвоичныеДанныеИзСтроки(СтрокаЖсонХедер));
	
	СтруктураДляЖсон.Очистить();
	
	//iss 	The email address of the service account.
	СтруктураДляЖсон.Вставить("iss", СтруктураСертификата.client_email);
	
	//scope 	A space-delimited list of the permissions that the application requests.
	//смотреть какой скоп нужен например: https://developers.google.com/sheets/api/guides/authorizing
	СтруктураДляЖсон.Вставить("scope", "https://www.googleapis.com/auth/spreadsheets");
	
	//aud 	A descriptor of the intended target of the assertion. 
	//When making an access token request this value is always https://www.googleapis.com/oauth2/v4/token.
	СтруктураДляЖсон.Вставить("aud", "https://www.googleapis.com/oauth2/v4/token");
	
	//exp 	The expiration time of the assertion, specified as seconds since 00:00:00 UTC, January 1, 1970. 
	//This value has a maximum of 1 hour after the issued time.
	ВремяИстеченияUTC = УниверсальноеВремя(ТекущаяДата())+60*60;
	СекундДо = ВремяИстеченияUTC - Дата(1970,1,1);
	СтруктураДляЖсон.Вставить("exp", СекундДо);
	
	//iat 	The time the assertion was issued, specified as seconds since 00:00:00 UTC, January 1, 1970.
	СтруктураДляЖсон.Вставить("iat", СекундДо-60*60);
	
	жсон = Новый ЗаписьJson;
	жсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(жсон, СтруктураДляЖсон);
	СтрокаЖсонКлэймСет = жсон.Закрыть();
	
	КлэймСет64 = Base64Url(ПолучитьДвоичныеДанныеИзСтроки(СтрокаЖсонКлэймСет));
	JWTдляСигнатуры = Хедер64+"."+КлэймСет64;
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);
	Хеширование.Добавить(JWTдляСигнатуры);
	ХешДвоичный = Хеширование.ХешСумма;
	
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//МакетПодписи = ОбработкаОбъект.ПолучитьМакет("Макет");
	//ХМЛТекст = ПолучитьСтрокуИзДвоичныхДанных(МакетПодписи);
	//КриптоПровайдер = Новый COMОбъект("System.Security.Cryptography.RSACryptoServiceProvider");
	//КриптоПровайдер.FromXmlString(ХМЛТекст);
	//
	//SafeArrayBinХешДляПодписи = SafeИзДвоичных(ХешДвоичный);
	//SafeArrayBinПодписьДвоичная = КриптоПровайдер.SignHash(SafeArrayBinХешДляПодписи, "SHA256");
	//ПодписьДвоичная = ДвоичныеИзSafe(SafeArrayBinПодписьДвоичная);
	
	ПодписьДвоичная = ПолучиьПодписьSHA256RSA(ХешДвоичный, СтруктураСертификата);
	Подпись64 = Base64Url(ПодписьДвоичная);
	
	JWT = JWTдляСигнатуры + "."+Подпись64;
	
	OpenSSL = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPСоединение = Новый HTTPСоединение("www.googleapis.com",,,,,,OpenSSL);
	Заголовки = Новый Соответствие;
 	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	grant_type = КодироватьСтроку("urn:ietf:params:oauth:grant-type:jwt-bearer",СпособКодированияСтроки.КодировкаURL);
	HTTPЗапрос = Новый HTTPЗапрос("/oauth2/v4/token", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки("grant_type="+grant_type+"&assertion="+JWT);
	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		//Сообщить("Токен не получен, сервер вернул:");
		//Сообщить(ТелоОтвета);
		//Возврат;
	КонецЕсли;
	
	жсон = Новый ЧтениеJSON;
	жсон.УстановитьСтроку(ТелоОтвета);
	Попытка
		СтруктураЖсон = ПрочитатьJSON(жсон);
	Исключение
		//Сообщить ("Гугл вернул не Жсон: " + ТелоОтвета);
		Возврат Ложь;
	КонецПопытки;
	
	Если СтруктураЖсон.Свойство("access_token") Тогда
		Параметры.Вставить("Пароль", СтруктураЖсон.access_token);
		//истекает = ТекущаяДата() + СтруктураЖсон.expires_in - 10;
	Иначе
		Возврат Ложь;
		//истекает = Неопределено;
	КонецЕсли;
	
	//
	СтрокаПериодДата = ""; 
	Если Параметры.ЕстьДатаВПараметрахЗапроса Тогда
		СтрокаПериодДата = "_" + ПолучитьДатуISO8601(Параметры.ПериодДата, Ложь);
	КонецЕсли;
	//
	КоличествоСтрок = ТаблицаЗначенийЗапроса.Количество();
	КоличествоКолонок = МассивПолей.Количество() + 1;
	//
	ИмяЛиста = Параметры.ИмяТаблицыТранслит + СтрокаПериодДата;
	НотацияЦелевойАдресНачало = НотацияА1(1, 1);
	НотацияЦелевойАдресКонец = НотацияА1(КоличествоСтрок, КоличествоКолонок);
	ЦелевойАдресА1 = ИмяЛиста + "!"+НотацияЦелевойАдресНачало+":"+НотацияЦелевойАдресКонец;
	//
	СтруктураДляJSON = Новый Структура;
	СтруктураДляJSON.Вставить("range", ЦелевойАдресА1);
	//СтруктураДляJSON.Вставить("majorDimension", "COLUMNS");
	СтруктураДляJSON.Вставить("majorDimension", "ROWS");
	//СтруктураДляJSON.Вставить("values", ТекстЗапроса);
	СтруктураДляJSON.Вставить("values", ТаблицаЗначенийЗапроса);
	//
	СтруктураURI = СтруктураURI(Параметры.Адрес);
	Параметры.Вставить("Адрес", СтруктураURI.Хост);
	//
	Соединение = ПолучитьHTTPСоединение(Параметры);
	//
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Authorization", "Bearer " + Параметры.Пароль);
	//
	СтруктураURI.Вставить("ПутьНаСервере", "/v4/spreadsheets/" + Параметры.КлючТаблицы + "/values/" + ИмяЛиста + "!"+НотацияЦелевойАдресНачало+":"+НотацияЦелевойАдресКонец);
	ПараметрыСтрока = "?valueInputOption=USER_ENTERED";
	//
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере + ПараметрыСтрока, Заголовки);
	//
	Если Параметры.ФорматДанных = "JSON" Тогда
		ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет,,Истина,ЭкранированиеСимволовJSON.Нет,,,Ложь,Ложь,Ложь);
		СтрокаСтруктураJSON = ПолучитьТелоJSONИзСтруктуры(СтруктураДляJSON, ПараметрыJSON, Истина);
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаСтруктураJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	//
	//Результат = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Результат = Соединение.Записать(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Если ЭтоОшибкаЗапросаREST(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если СтрНайти(ВРег(ТекстОтвета), "200") > 0
		ИЛИ ВРег(ТекстОтвета) = "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	//
	Возврат Истина;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-09-2025 9:30 end

Функция JWTдляСигнатуры()
	
	//это все время одинаковое, можно сразу base64урл, здесь для сверки с примером
	жсон = Новый ЗаписьJson;
	жсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	жсон.ЗаписатьНачалоОбъекта();
	жсон.ЗаписатьИмяСвойства("alg");
	жсон.ЗаписатьЗначение("RS256");
	жсон.ЗаписатьИмяСвойства("typ");
	жсон.ЗаписатьЗначение("JWT");
	жсон.ЗаписатьКонецОбъекта();
	СтрокаЖсонХедер = жсон.Закрыть();
	Хедер64 = Base64Url(ПолучитьДвоичныеДанныеИзСтроки(СтрокаЖсонХедер));
	
	жсон = Новый ЗаписьJson;
	жсон.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	жсон.ЗаписатьНачалоОбъекта();
	
	//iss 	The email address of the service account.
	жсон.ЗаписатьИмяСвойства("iss");
	жсон.ЗаписатьЗначение("dansserviceaccount@dans-test-project-198115.iam.gserviceaccount.com");
	
	//scope 	A space-delimited list of the permissions that the application requests.
	//смотреть что нужно например: https://developers.google.com/sheets/api/guides/authorizing
	жсон.ЗаписатьИмяСвойства("scope");
	жсон.ЗаписатьЗначение("https://www.googleapis.com/auth/spreadsheets");
	
	//aud 	A descriptor of the intended target of the assertion. 
	//When making an access token request this value is always https://www.googleapis.com/oauth2/v4/token.
	жсон.ЗаписатьИмяСвойства("aud");
	жсон.ЗаписатьЗначение("https://www.googleapis.com/oauth2/v4/token");
	
	//exp 	The expiration time of the assertion, specified as seconds since 00:00:00 UTC, January 1, 1970. 
	//This value has a maximum of 1 hour after the issued time.
	ВремяДо = УниверсальноеВремя(ТекущаяДата())+60*60;
	СекундДо = ВремяДо - Дата(1970,1,1);
	жсон.ЗаписатьИмяСвойства("exp");
	жсон.ЗаписатьЗначение(СекундДо);
	
	//iat 	The time the assertion was issued, specified as seconds since 00:00:00 UTC, January 1, 1970.
	жсон.ЗаписатьИмяСвойства("iat");
	жсон.ЗаписатьЗначение(СекундДо-60*60);
	
	жсон.ЗаписатьКонецОбъекта();
	СтрокаЖсонКлэймСет = жсон.Закрыть();
	КлэймСет64 = Base64Url(ПолучитьДвоичныеДанныеИзСтроки(СтрокаЖсонКлэймСет));
	
	Возврат Хедер64+"."+КлэймСет64;
	
КонецФункции


Функция Base64Url(ДвоичныеДанные)
	
	бейс64строка = Base64Строка(ДвоичныеДанные);
	бейс64строка = стрЗаменить(бейс64строка, "+", "-");
	бейс64строка = стрЗаменить(бейс64строка, "/", "_");
	бейс64строка = стрЗаменить(бейс64строка, Символы.ВК, "");
	бейс64строка = стрЗаменить(бейс64строка, Символы.ПС, "");
	
	Если Прав(бейс64строка, 2) = "==" Тогда
		бейс64строка = Лев(бейс64строка,СтрДлина(бейс64строка)-2);
		
	ИначеЕсли Прав(бейс64строка, 1) = "=" Тогда
		бейс64строка = Лев(бейс64строка,СтрДлина(бейс64строка)-1);
	КонецЕсли;
	
	Возврат бейс64строка;
	
КонецФункции


Процедура ПарсХекс(Родитель, ХексСтрокаКлюча, СтрокаOCTET_STRING)
	Тэги = Новый Соответствие;
	Тэги.Вставить("30","SEQUENCE");
	Тэги.Вставить("02","INTEGER");
	Тэги.Вставить("06","OBJECT IDENTIFIER");
	Тэги.Вставить("04","OCTET STRING");
	Тэги.Вставить("05","NULL");
	
	Позиция = 1;
	//Родитель = парс;
	Пока Позиция < СтрДлина(ХексСтрокаКлюча) Цикл
		сПарс = Родитель.Строки.Добавить();
		
		сПарс.Класс = Сред(ХексСтрокаКлюча, Позиция, 2);
		Позиция = Позиция + 2;
		сПарс.ИмяКласса = Тэги.Получить(сПарс.Класс);
		
		байт = Сред(ХексСтрокаКлюча, Позиция, 2);
		Если байт = "81" или байт = "82" Тогда
			сПарс.ПредбайтДлины = байт;
			Позиция = Позиция + 2;
			
			КолвоБайтАдресации = Число(байт) - 80;
			сПарс.БайтДлины = Сред(ХексСтрокаКлюча, Позиция, 2 * КолвоБайтАдресации);
			Позиция = Позиция + 2 * КолвоБайтАдресации;
			сПарс.ДлинаЧисло = ЧислоИзШестнадцатеричнойСтроки("0x"+сПарс.БайтДлины);
			
			сПарс.Значение = Сред(ХексСтрокаКлюча, Позиция, 2 * сПарс.ДлинаЧисло);
			Позиция = Позиция + 2 * сПарс.ДлинаЧисло;
			//последнюю позицию сдвинем/несдвинем после Если
			
		Иначе
			сПарс.ПредбайтДлины = ""; //отсутствует
			
			сПарс.БайтДлины = Сред(ХексСтрокаКлюча, Позиция, 2);
			Позиция = Позиция + 2;
			сПарс.ДлинаЧисло = ЧислоИзШестнадцатеричнойСтроки("0x"+сПарс.БайтДлины);
			
			сПарс.Значение = Сред(ХексСтрокаКлюча, Позиция, 2 * сПарс.ДлинаЧисло);
			Позиция = Позиция + 2 * сПарс.ДлинаЧисло;

		КонецЕсли;
		
		Если сПарс.ИмяКласса = "OCTET STRING" Тогда
			СтрокаOCTET_STRING = сПарс;
		КонецЕсли;
		
		Если сПарс.ИмяКласса = "SEQUENCE" или сПарс.ИмяКласса = "OCTET STRING" Тогда
			// эти классы содержат подклассы, разбираем подветки рекурсивно
			ПарсХекс(сПарс, сПарс.Значение, СтрокаOCTET_STRING)
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучиьПодписьSHA256RSA(ХешДвоичный, ПараметрыСертификатаСтруктура)
		
	ХешХексСтрока = ПолучитьHexСтрокуИзДвоичныхДанных(ХешДвоичный);
	
	// PKCS #1 v2.2: RSA Cryptography Standard, 9.2 EMSA-PKCS1-v1_5
	// перед подписанием хеш дополняется данными
	// EM  = 0x00 || 0x01 ||PS  || 0x00 ||T
	// T SHA-256:  (0x)30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00 04 20 || H
	ЕМ = "0001" + "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"+
	"00" + "3031300D060960864801650304020105000420" + ХешХексСтрока; 
	
	ХешХексСтрока = ЕМ;
  	хешчисло = ЧислоИзШестнадцатеричнойСтроки("0x"+ХешХексСтрока);
	
	СтрукСерт = ПараметрыСертификатаСтруктура;	
	dP 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.DP);
	p 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.P);
	dQ	 		= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.DQ);
	q 			= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Q);
	qInv 		= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.InverseQ);
	Exponent 	= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Exponent); //открытый параметр ключа
	Modulus 	= ЧислоИзШестнадцатеричнойСтроки("0x"+СтрукСерт.Modulus); //открытый параметр ключа
	
	//s1 = pow(хешчисло,DP_Число)% P_Число;//переполнение десятичной арифметики
	
	// ↓ вычисление подписи по ускоренному алгоритму
	s1 = ВозведениеВСтепеньПоМодулю (хешчисло, dP, p);
	s2 = ВозведениеВСтепеньПоМодулю (хешчисло, dQ, q);
	Если s1>s2 Тогда
		h = ((s1-s2)*qInv)%p
	Иначе
		h = ((s1-s2+p)*qInv)%p
	КонецЕсли;
	s = s2 + q*h; //подпись - число
	// ↑
	
	ПроверкаПодписиЧисло = ВозведениеВСтепеньПоМодулю (s, Exponent, Modulus);
	подписьВерна = (ПроверкаПодписиЧисло = хешчисло);
	//Сообщить ("Подпись верна:" + подписьВерна); 
	
	Возврат ДвоичныеИзЧисла(s)
	
КонецФункции

Функция ДвоичныеИзЧисла(знач мЧисло)
	МассивЧиселБайт = Новый Массив;
	Пока мЧисло>0 Цикл
		ТекущийБайт = мЧисло%256;
		МассивЧиселБайт.Добавить(ТекущийБайт);
		мЧисло = (мЧисло - ТекущийБайт)/256;
	КонецЦикла;
	РазмерБайт = МассивЧиселБайт.Количество();
	Буфер = Новый БуферДвоичныхДанных(РазмерБайт);
	Для сч = 0 по РазмерБайт-1 Цикл
		Буфер.Установить(РазмерБайт-1-сч, МассивЧиселБайт[сч]);
	КонецЦикла;

	Возврат ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
КонецФункции

Функция ВозведениеВСтепеньПоМодулю0 (Основание, Степень, Модуль) //долго
	//function modular_pow(base, index_n, modulus)
	//c := 1
	//for index_n_prime = 1 to index_n 
	//    c := (c * base) mod modulus
	//return c
	Остаток = 1;
	Для сч = 1 по Степень Цикл
		Остаток = Остаток * Основание - Цел((Остаток * Основание) / Модуль) * Модуль;
	КонецЦикла;
	Возврат Остаток;
КонецФункции

Функция ВозведениеВСтепеньПоМодулю (Основание, Степень, Модуль)
	
	// Двоичное представление степени переведем в массив нулей и единиц в обратном порядке
	МассивЕдиниц = Новый Массив;
	Значение = Степень;
    Пока Значение>0 цикл
        Остат = Значение%2;
		МассивЕдиниц.Добавить(Остат);
        Значение = (Значение-Остат)/2;
	КонецЦикла;
	
	//Основание переведем в массив по хитрому правилу
	МассивИзОснования = Новый Массив;
	Для сч=0 по МассивЕдиниц.ВГраница() Цикл
		Если сч = 0 тогда
			МассивИзОснования.Добавить(Основание);
		Иначе
			МассивИзОснования.Добавить(pow(МассивИзОснования[сч-1],2)%Модуль);
		КонецЕсли;
	КонецЦикла;
	
	//Вычислим произведение степеней
	Произведение = 1;
	Для сч=0 по МассивЕдиниц.ВГраница() Цикл
		Произведение = Произведение * pow(МассивИзОснования[сч],МассивЕдиниц[сч]);
	КонецЦикла;
	
	Возврат Произведение%Модуль;
	
КонецФункции


//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start
Процедура СохранитьТаблицуЗначенийВExcel(_ТаблицаЗначений, _ПутьДоФайла, _ТипФайла)
	ТипФайлаТабличногоДокументаExcel = ТипФайлаТабличногоДокумента.XLS;
	Если _ТипФайла = "XLSX" Тогда
		ТипФайлаТабличногоДокументаExcel = ТипФайлаТабличногоДокумента.XLSX;
	КонецЕсли;
	//
	_ПостроительОтчета = Новый ПостроительОтчета;
	_ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(_ТаблицаЗначений);
	_ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
	//
	_ТабличныйДокумент = Новый ТабличныйДокумент;
	_ПостроительОтчета.Вывести(_ТабличныйДокумент);
	//
	ОбластьНаУдаление = _ТабличныйДокумент.Область(1, 1, _ТабличныйДокумент.ВысотаТаблицы, 1);
	_ТабличныйДокумент.УдалитьОбласть(ОбластьНаУдаление, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	Для НомерКолонки = 1 По _ТабличныйДокумент.ШиринаТаблицы Цикл
        ШиринаКолонки = 0;
        Для НомерСтроки = 1 По _ТабличныйДокумент.ВысотаТаблицы Цикл
            Область = _ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
            ШиринаОбласти = Область.Отступ + СтрДлина(СокрЛП(Область.Текст));
            ШиринаКолонки = Макс(ШиринаКолонки, ШиринаОбласти + 3);
            Если ШиринаКолонки > 25 Тогда
                Область.ШиринаКолонки = 25;
            Иначе
                Область.ШиринаКолонки = ШиринаКолонки;
            КонецЕсли;
        Конеццикла;
    КонецЦикла;
	//                  
	_ТабличныйДокумент.Записать(_ПутьДоФайла, ТипФайлаТабличногоДокументаExcel);
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 start									
Функция ВыполнитьЗапросPOST_PostgreSQL(ТекстЗапроса, Параметры)
	Запрос = ТекстЗапроса;
	//
	ТекстОтвета = КомандаВыполнитьPostgreSQL(ТекстЗапроса, Параметры, "post");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаPostgreSQL(ТекстОтвета);
	Если КодРасшифровкиОтвета >= 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start									
Функция ВыполнитьЗапросPOST_MySQL(ТекстЗапроса, Параметры)
	Запрос = ТекстЗапроса;
	//
	ТекстОтвета = КомандаВыполнитьMySQL(ТекстЗапроса, Параметры, "post");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаMySQL(ТекстОтвета);
	Если КодРасшифровкиОтвета >= 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 start									
Функция ВыполнитьЗапросGET_REST(ТекстЗапроса, Параметры)
	Соединение = ПолучитьHTTPСоединение(Параметры);
	HTTPЗапрос = Новый HTTPЗапрос("?query="+ТекстЗапроса);
	Результат = Соединение.Получить(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Возврат ТекстОтвета; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 start									
Функция ВыполнитьЗапросGET_ClickHouseDB(ТекстЗапроса, Параметры)
	Соединение = ПолучитьHTTPСоединение(Параметры);
	HTTPЗапрос = Новый HTTPЗапрос("?query="+ТекстЗапроса);
	Результат = Соединение.Получить(HTTPЗапрос);
	ТекстОтвета = Результат.ПолучитьТелоКакСтроку();
	Возврат ТекстОтвета; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start									
Функция ВыполнитьЗапросGET_PostgreSQL(ТекстЗапроса, Параметры, Тип)
	ДанныеРезультат = КомандаВыполнитьPostgreSQL(ТекстЗапроса, Параметры, Тип);
	//
	Возврат ДанныеРезультат; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start									
Функция ВыполнитьЗапросGET_MySQL(ТекстЗапроса, Параметры, Тип)
	ДанныеРезультат = КомандаВыполнитьMySQL(ТекстЗапроса, Параметры, Тип);
	//
	Возврат ДанныеРезультат; 
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Функция КомандаВыполнитьPostgreSQL(ТекстЗапроса, Параметры, Тип)
	ИмяФункции = "ВыполнитьPostgreSQL";
	АбсолютныйПутьСкрипта = СохранитьСкриптPythonНаСервере(ИмяФункции);
	ПараметрыЗапуска = "";
	ПараметрыЗапускаСтруктура = СформироватьПараметрыЗапуска_ВыполнитьPostgreSQL(ТекстЗапроса, Параметры, Тип);
	Для Каждого КлючЗначение Из ПараметрыЗапускаСтруктура Цикл
		ПараметрыЗапуска =  ПараметрыЗапуска + " """ + КлючЗначение.Значение + """";
	КонецЦикла;
	КодВозврата = ЗапуститьПриложениеPythonНаСервере(ИмяФункции, ПараметрыЗапуска, Параметры.АбсолютныйПутьPython);
	// Обработка результата выполнения приложения
	Если КодВозврата = 0 Тогда
		ТекстовыйФайл = Новый ТекстовыйДокумент;
	    ТекстовыйФайл.Прочитать(ПараметрыЗапускаСтруктура.АбсолютныйПутьРезультата, КодировкаТекста.UTF8);
		ДанныеРезультат = ТекстовыйФайл.ПолучитьТекст();
		Возврат ДанныеРезультат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start
Функция КомандаВыполнитьMySQL(ТекстЗапроса, Параметры, Тип)
	ИмяФункции = "ВыполнитьMySQL";
	АбсолютныйПутьСкрипта = СохранитьСкриптPythonНаСервере(ИмяФункции);
	ПараметрыЗапуска = "";
	ПараметрыЗапускаСтруктура = СформироватьПараметрыЗапуска_ВыполнитьMySQL(ТекстЗапроса, Параметры, Тип);
	Для Каждого КлючЗначение Из ПараметрыЗапускаСтруктура Цикл
		ПараметрыЗапуска =  ПараметрыЗапуска + " """ + КлючЗначение.Значение + """";
	КонецЦикла;
	КодВозврата = ЗапуститьПриложениеPythonНаСервере(ИмяФункции, ПараметрыЗапуска, Параметры.АбсолютныйПутьPython);
	// Обработка результата выполнения приложения
	Если КодВозврата = 0 Тогда
		ТекстовыйФайл = Новый ТекстовыйДокумент;
	    ТекстовыйФайл.Прочитать(ПараметрыЗапускаСтруктура.АбсолютныйПутьРезультата, КодировкаТекста.UTF8);
		ДанныеРезультат = ТекстовыйФайл.ПолучитьТекст();
		Возврат ДанныеРезультат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
//@skip-check module-accessibility-at-client
Функция ЗапуститьПриложениеPythonНаСервере(ИмяФункции, ПараметрыЗапуска = "", АбсолютныйПутьPython)
	
	Перем КодВозврата;
	
	АдресСкрипта = СтрШаблон("%1%2.py",КаталогВременныхФайлов(),ИмяФункции);
	
	// Запуск скрипта
	Парам = Новый Структура("Функция", ИмяФункции);
	ЗапуститьПриложение(СтрШаблон("""" + АбсолютныйПутьPython + """ %1 %2", АдресСкрипта, ПараметрыЗапуска),,Истина,КодВозврата); 
	
	Возврат КодВозврата;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end


//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Функция СформироватьПараметрыЗапуска_ВыполнитьPostgreSQL(ТекстЗапроса, Параметры, Тип)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	ПараметрыЗапуска = Новый Структура;
	//
	АбсолютныйПуть = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".txt";
	АбсолютныйПутьРезультата = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".txt";
	//
	СохранитьТекстВТекстовыйФайл(ТекстЗапроса, АбсолютныйПуть);
	//
	ПараметрыЗапуска.Вставить("АбсолютныйПутьДанных", АбсолютныйПуть);
	ПараметрыЗапуска.Вставить("АбсолютныйПутьРезультата", АбсолютныйПутьРезультата);
	//
	ПараметрыЗапуска.Вставить("ИмяБазы", Параметры.ИмяБазы);
	ПараметрыЗапуска.Вставить("ИмяПользователя", Параметры.Логин);
	ПараметрыЗапуска.Вставить("Пароль", Параметры.Пароль);
	ПараметрыЗапуска.Вставить("Адрес", Параметры.Адрес);
	ПараметрыЗапуска.Вставить("Тип", Тип);
	//
	Возврат ПараметрыЗапуска;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start
Функция СформироватьПараметрыЗапуска_ВыполнитьMySQL(ТекстЗапроса, Параметры, Тип)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	ПараметрыЗапуска = Новый Структура;
	//
	АбсолютныйПуть = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".txt";
	АбсолютныйПутьРезультата = КаталогВременныхФайлов + Строка(Новый УникальныйИдентификатор) + ".txt";
	//
	СохранитьТекстВТекстовыйФайл(ТекстЗапроса, АбсолютныйПуть);
	//
	ПараметрыЗапуска.Вставить("АбсолютныйПутьДанных", АбсолютныйПуть);
	ПараметрыЗапуска.Вставить("АбсолютныйПутьРезультата", АбсолютныйПутьРезультата);
	//
	ПараметрыЗапуска.Вставить("ИмяБазы", Параметры.ИмяБазы);
	ПараметрыЗапуска.Вставить("ИмяПользователя", Параметры.Логин);
	ПараметрыЗапуска.Вставить("Пароль", Параметры.Пароль);
	ПараметрыЗапуска.Вставить("Адрес", Параметры.Адрес);
	ПараметрыЗапуска.Вставить("Тип", Тип);
	//
	Возврат ПараметрыЗапуска;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Процедура СохранитьТекстВТекстовыйФайл(Текст, АбсолютныйПуть)
	
	Кодировка = КодировкаТекста.UTF8;
	ТекстовыйФайлЗапись = Новый ЗаписьТекста(АбсолютныйПуть, Кодировка);           
	ТекстовыйФайлЗапись.ЗаписатьСтроку(Текст);
	ТекстовыйФайлЗапись.Закрыть();
		
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Процедура СохранитьТаблицуЗначенийВCSV(ТаблицаЗначений, АбсолютныйПуть, Колонки, ПераметрыФорматирования=Неопределено)
	
	Разделитель = ";";
	Текст="";
	Форматирование = Новый Структура;
	
	// Заголовок
	Для Каждого КолонкаИмя Из Колонки Цикл
		Текст=Текст + КолонкаИмя + Разделитель;
		Если ПераметрыФорматирования<>Неопределено
			И ПераметрыФорматирования.Свойство(КолонкаИмя)=Истина Тогда
			Форматирование.Вставить(КолонкаИмя, ПераметрыФорматирования[КолонкаИмя]);
		Иначе
			Форматирование.Вставить(КолонкаИмя, "");
		КонецЕсли;
	КонецЦикла;
	Текст = Лев(Текст, СтрДлина(Текст)-1)+Символы.ПС;
	
	// Содержание
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Для Каждого КолонкаИмя Из Колонки Цикл
			Текст=Текст + Формат(Строка[КолонкаИмя],Форматирование[КолонкаИмя]) + Разделитель;
		КонецЦикла;
		Текст = Лев(Текст, СтрДлина(Текст)-1)+Символы.ПС;
	КонецЦикла;
	
	// Запись
	Кодировка = КодировкаТекста.UTF8;
	ТекстовыйФайлЗапись = Новый ЗаписьТекста(АбсолютныйПуть,Кодировка);           
	ТекстовыйФайлЗапись.ЗаписатьСтроку(Текст);
	ТекстовыйФайлЗапись.Закрыть();
	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Функция СохранитьСкриптPythonНаСервере(ИмяФункции)
	
	// Сохранение скрипта в файл
	МакетСкрипта = ПолучитьМакетСкрипта(СтрШаблон("Скрипт_%1", ИмяФункции));
	АбсолютныйПуть = КаталогВременныхФайлов() + СтрШаблон("%1.py", ИмяФункции);
	МакетСкрипта.Записать(АбсолютныйПуть);
	
	Возврат АбсолютныйПуть;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start
Функция ПолучитьМакетСкрипта(ИмяМакета)
	
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start									
Функция ЕстьТаблицаВ(ИмяТаблицы, Параметры)
	
	РезультатВыполненияЗапроса = Ложь;
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		РезультатВыполненияЗапроса = ЕстьТаблицаВClickHouseDB(ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "REST" Тогда
		РезультатВыполненияЗапроса = ЕстьТаблицаВREST(ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		РезультатВыполненияЗапроса = ЕстьТаблицаВPostgreSQL(ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		РезультатВыполненияЗапроса = ЕстьТаблицаВMySQL(ИмяТаблицы, Параметры);
	Иначе
		РезультатВыполненияЗапроса = Ложь;
	КонецЕсли;
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 start									
Функция ЕстьТаблицаВClickHouseDB(ИмяТаблицы, Параметры)
	ТекстЗапроса = "SELECT * FROM " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + " LIMIT 1;";
	//
	ТекстОтвета = ВыполнитьЗапросGET_ClickHouseDB(ТекстЗапроса, Параметры);
	Если ТекстОтвета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЭтоОшибкаЗапросаClickHouseDB(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТекстОтвета <> "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 start									
Функция ЕстьТаблицаВREST(ИмяТаблицы, Параметры)
	ТекстЗапроса = "SELECT * FROM " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + " LIMIT 1;";
	//
	Возврат Истина;
	ТекстОтвета = ВыполнитьЗапросGET_REST(ТекстЗапроса, Параметры);
	Если ТекстОтвета = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЭтоОшибкаЗапросаREST(ТекстОтвета) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТекстОтвета <> "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start									
Функция ЕстьТаблицаВPostgreSQL(ИмяТаблицы, Параметры)
	ТекстЗапроса = "SELECT * FROM " + Параметры.ИмяТаблицыТранслит + " LIMIT 1;";
	//
	ТекстОтвета = ВыполнитьЗапросGET_PostgreSQL(ТекстЗапроса, Параметры, "get");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаPostgreSQL(ТекстОтвета);
	Если КодРасшифровкиОтвета >= 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start									
Функция ЕстьТаблицаВMySQL(ИмяТаблицы, Параметры)
	ТекстЗапроса = "DESCRIBE " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + ";";
	//
	ТекстОтвета = ВыполнитьЗапросGET_MySQL(ТекстЗапроса, Параметры, "get_json");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаMySQL(ТекстОтвета);
	Если КодРасшифровкиОтвета >= 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 start									
Функция ОписаниеТаблицыВ(ИмяТаблицы, Параметры)
	
	Если Параметры.ТипБазы = "ClickHouseDB" Тогда
		Возврат ОписаниеТаблицыВClickHouseDB(ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "REST" Тогда
		Возврат ОписаниеТаблицыВREST(Новый Массив, ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "PostgreSQL" Тогда
		Возврат ОписаниеТаблицыВPostgreSQL(ИмяТаблицы, Параметры);
	ИначеЕсли Параметры.ТипБазы = "MySQL" Тогда
		Возврат ОписаниеТаблицыВMySQL(ИмяТаблицы, Параметры);
	Иначе
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start
Функция ПолучитьСтруктуруJSON(ТекстJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат Результат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-03-2025 18:30 start
Функция ПолучитьСтруктуруТЗДляОписаниеТаблицы()
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяСКД", Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИндексСКД", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЕстьРазница", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("СозданиеПоля", Новый ОписаниеТипов("Строка"));
	
	Возврат ТЗ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-03-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 start									
Функция ОписаниеТаблицыВClickHouseDB(ИмяТаблицы, Параметры)
	ТекстЗапроса = "DESCRIBE TABLE " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит;
	//
	ТекстОтвета = ВыполнитьЗапросGET_ClickHouseDB(ТекстЗапроса, Параметры);
	МассивСтрок = СтрРазделитьРасширенная(ТекстОтвета, Символы.ПС);
	ТЗ = ПолучитьСтруктуруТЗДляОписаниеТаблицы();
	Для каждого СтрокаМ из МассивСтрок Цикл
		Если СтрДлина(СтрокаМ) > 0 Тогда
			СтрокаТЗ = ТЗ.Добавить();
			РазделеннаяМ = СтрРазделитьРасширенная(СтрокаМ, Символы.Таб);
			СтрокаТЗ.Имя = РазделеннаяМ[0];
			СтрокаТЗ.Тип = РазделеннаяМ[1];
			СтрокаТЗ.ИмяСКД = "";
			СтрокаТЗ.ИндексСКД = -1;
		КонецЕсли;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 14-03-2024 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 start									
Функция ОписаниеТаблицыВREST(МассивСтрок, ИмяТаблицы = "", Параметры = Неопределено)
	ТЗ = ПолучитьСтруктуруТЗДляОписаниеТаблицы();
	Для каждого СтрокаМ из МассивСтрок Цикл
		Если СтрДлина(СтрокаМ) > 0 Тогда
			СтрокаТЗ = ТЗ.Добавить();

			СтрокаТЗ.Имя = СтрокаМ;
			СтрокаТЗ.Тип = "Строка";
			СтрокаТЗ.ИмяСКД = "";
			СтрокаТЗ.ИндексСКД = -1;
		КонецЕсли;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start									
Функция ОписаниеТаблицыВPostgreSQL(ИмяТаблицы, Параметры)
																																				   
	ТекстЗапроса = "SELECT * FROM information_schema.columns WHERE table_schema = 'public' AND table_name = '" + Параметры.ИмяТаблицыТранслит + "'";
	//
	ТЗ = ПолучитьСтруктуруТЗДляОписаниеТаблицы();
	//
	ТекстОтвета = ВыполнитьЗапросGET_PostgreSQL(ТекстЗапроса, Параметры, "get_json");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаPostgreSQL(ТекстОтвета);
	Если КодРасшифровкиОтвета < 0 Тогда
		Возврат ТЗ;
	КонецЕсли;
	Если ТекстОтвета <> "" Тогда
		МассивСтрок = ПолучитьСтруктуруJSON(ТекстОтвета);
	Иначе
		Возврат ТЗ;
	КонецЕсли;
														   
	Для каждого СтрокаМ из МассивСтрок Цикл
														  
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.Имя = СтрокаМ["column_name"];											 
		СтрокаТЗ.Тип = СтрокаМ["data_type"];
		СтрокаТЗ.ИмяСКД = "";
		СтрокаТЗ.ИндексСКД = -1;
					 
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 start									
Функция ОписаниеТаблицыВMySQL(ИмяТаблицы, Параметры)
																																				   
	ТекстЗапроса = "DESCRIBE " + Параметры.ИмяБазы +"." + Параметры.ИмяТаблицыТранслит + ";";
	//
	ТЗ = ПолучитьСтруктуруТЗДляОписаниеТаблицы();
	//
	ТекстОтвета = ВыполнитьЗапросGET_MySQL(ТекстЗапроса, Параметры, "get_json");
	КодРасшифровкиОтвета = ЭтоОшибкаЗапросаMySQL(ТекстОтвета);
	Если КодРасшифровкиОтвета < 0 Тогда
		Возврат ТЗ;
	КонецЕсли;
	Если ТекстОтвета <> "" Тогда
		МассивСтрок = ПолучитьСтруктуруJSON(ТекстОтвета);
	Иначе
		Возврат ТЗ;
	КонецЕсли;
														   
	Для каждого СтрокаМ из МассивСтрок Цикл
														  
		СтрокаТЗ = ТЗ.Добавить();
		СтрокаТЗ.Имя = СтрокаМ["Field"];											 
		СтрокаТЗ.Тип = СтрокаМ["Type"];
		СтрокаТЗ.ИмяСКД = "";
		СтрокаТЗ.ИндексСКД = -1;
					 
	КонецЦикла;
	Возврат ТЗ;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 18:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 start										
Функция ЭтоОшибкаЗапросаREST(ТекстОтвета)
	Если СтрНайти(ВРег(ТекстОтвета), "CODE: 32") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 57") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 62") Тогда
		Возврат Истина; 
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 60") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 36") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE:") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 09-06-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start										
Функция ЭтоОшибкаЗапросаClickHouseDB(ТекстОтвета)
	Если СтрНайти(ВРег(ТекстОтвета), "CODE: 32") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 57") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 62") Тогда
		Возврат Истина; 
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 60") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE: 36") Тогда
		Возврат Истина;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), "CODE:") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 9:30 start										
Функция ЭтоОшибкаЗапросаPostgreSQL(ТекстОтвета)
	Если ТекстОтвета = Неопределено Тогда
		Возврат -100;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("does not exist")) Тогда
		Возврат -1;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("duplicate key value")) Тогда
		Возврат -2;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("ERROR")) Тогда
		Возврат -3;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("OK")) Тогда
		Возврат 0;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 28-03-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 start										
Функция ЭтоОшибкаЗапросаMySQL(ТекстОтвета)
	Если ТекстОтвета = Неопределено Тогда
		Возврат -100;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("does not exist")) Тогда
		Возврат -1;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("duplicate key value")) Тогда
		Возврат -2;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("ERROR")) Тогда
		Возврат -3;
	ИначеЕсли СтрНайти(ВРег(ТекстОтвета), ВРег("OK")) Тогда
		Возврат 0;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 10-04-2025 9:30 end																				  

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 start																					   
Функция Транслит(Строка) 
    
   Рез = СокрЛП(Строка);   
   Рез = СтрЗаменить(Рез,"а","a"); 
   Рез = СтрЗаменить(Рез,"б","b"); 
   Рез = СтрЗаменить(Рез,"в","v"); 
   Рез = СтрЗаменить(Рез,"г","g"); 
   Рез = СтрЗаменить(Рез,"д","d"); 
   Рез = СтрЗаменить(Рез,"е","e"); 
   Рез = СтрЗаменить(Рез,"ё","e"); 
   Рез = СтрЗаменить(Рез,"ж","zh"); 
   Рез = СтрЗаменить(Рез,"з","z"); 
   Рез = СтрЗаменить(Рез,"и","i"); 
   Рез = СтрЗаменить(Рез,"к","k"); 
   Рез = СтрЗаменить(Рез,"л","l"); 
   Рез = СтрЗаменить(Рез,"м","m"); 
   Рез = СтрЗаменить(Рез,"н","n"); 
   Рез = СтрЗаменить(Рез,"о","o"); 
   Рез = СтрЗаменить(Рез,"п","p"); 
   Рез = СтрЗаменить(Рез,"р","r"); 
   Рез = СтрЗаменить(Рез,"с","s"); 
   Рез = СтрЗаменить(Рез,"т","t"); 
   Рез = СтрЗаменить(Рез,"у","u"); 
   Рез = СтрЗаменить(Рез,"ф","f"); 
   Рез = СтрЗаменить(Рез,"х","h"); 
   Рез = СтрЗаменить(Рез,"ч","ch"); 
   Рез = СтрЗаменить(Рез,"ш","sh"); 
   Рез = СтрЗаменить(Рез,"щ","sch"); 
   Рез = СтрЗаменить(Рез,"ъ",""); 
   Рез = СтрЗаменить(Рез,"ь",""); 
   Рез = СтрЗаменить(Рез,"э","e"); 
   Рез = СтрЗаменить(Рез,"ю","yu"); 
   Рез = СтрЗаменить(Рез,"й","i"); 
   Рез = СтрЗаменить(Рез,"ц","c"); 
   Рез = СтрЗаменить(Рез,"я","ya"); 
   Рез = СтрЗаменить(Рез,"ы","i"); 
   Рез = СтрЗаменить(Рез,"А","A"); 
   Рез = СтрЗаменить(Рез,"Б","B"); 
   Рез = СтрЗаменить(Рез,"В","V"); 
   Рез = СтрЗаменить(Рез,"Г","G"); 
   Рез = СтрЗаменить(Рез,"Д","D"); 
   Рез = СтрЗаменить(Рез,"Е","E"); 
   Рез = СтрЗаменить(Рез,"Ё","E"); 
   Рез = СтрЗаменить(Рез,"Ж","ZH"); 
   Рез = СтрЗаменить(Рез,"З","Z"); 
   Рез = СтрЗаменить(Рез,"И","I"); 
   Рез = СтрЗаменить(Рез,"К","K"); 
   Рез = СтрЗаменить(Рез,"Л","L"); 
   Рез = СтрЗаменить(Рез,"М","M"); 
   Рез = СтрЗаменить(Рез,"Н","N"); 
   Рез = СтрЗаменить(Рез,"О","O"); 
   Рез = СтрЗаменить(Рез,"П","P"); 
   Рез = СтрЗаменить(Рез,"Р","R"); 
   Рез = СтрЗаменить(Рез,"С","S"); 
   Рез = СтрЗаменить(Рез,"Т","T"); 
   Рез = СтрЗаменить(Рез,"У","U"); 
   Рез = СтрЗаменить(Рез,"Ф","F"); 
   Рез = СтрЗаменить(Рез,"Х","H"); 
   Рез = СтрЗаменить(Рез,"Ч","CH"); 
   Рез = СтрЗаменить(Рез,"Ш","SH"); 
   Рез = СтрЗаменить(Рез,"Щ","SCH"); 
   Рез = СтрЗаменить(Рез,"Ъ",""); 
   Рез = СтрЗаменить(Рез,"Ь",""); 
   Рез = СтрЗаменить(Рез,"Ы","I"); 
   Рез = СтрЗаменить(Рез,"Ц","C"); 
   Рез = СтрЗаменить(Рез,"Э","E"); 
   Рез = СтрЗаменить(Рез,"Ю","YU"); 
   Рез = СтрЗаменить(Рез,"Я","YA"); 
   Рез = СтрЗаменить(Рез,"Й","I");
   
   Рез = СтрЗаменить(Рез," ","-"); 
   Рез = СтрЗаменить(Рез,"--","-"); 
   Рез = СтрЗаменить(Рез,"--","-"); 
   Рез = СтрЗаменить(Рез,"--","-"); 
   Рез = СтрЗаменить(Рез,"#",""); 
   Рез = СтрЗаменить(Рез,"№",""); 
   Рез = СтрЗаменить(Рез,",",""); 
   Рез = СтрЗаменить(Рез,".",""); 
   Рез = СтрЗаменить(Рез,"/",""); 
   Рез = СтрЗаменить(Рез,"""",""); 
   Рез = СтрЗаменить(Рез,"(",""); 
   Рез = СтрЗаменить(Рез,")",""); 
   
   Возврат(Рез);
  
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 27-10-2023 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 start
Функция СохранитьПараметрыОбработки(ПараметрыОбработки, Настройки) Экспорт
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ПараметрыОбработки.КлючОбъекта, ПараметрыОбработки.КлючНастроек, Настройки,,ПараметрыОбработки.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	// ХранилищеОбщихНастроек.Cохранить(ПараметрыОбработки.КлючОбъекта,  ПараметрыОбработки.КлючНастроек, Настройки, , ПараметрыОбработки.ИмяПользователя);
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 start
Функция ПараметрыОбработки(_ИмяПользователя = Неопределено) Экспорт
	Результат = Новый Структура();
	Результат.Вставить("КлючОбъекта", ЭтотОбъект.Метаданные().Имя);
	Результат.Вставить("КлючНастроек", "Обработка");
	Если _ИмяПользователя <> Неопределено Тогда
		Результат.Вставить("ИмяПользователя", _ИмяПользователя);	
	Иначе
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
		ИмяПользователяСтрока =  Пользователь.Ссылка.Наименование;
		Результат.Вставить("ИмяПользователя", ИмяПользователяСтрока);
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ИмяПользователя) Тогда
			Результат.Вставить("ИмяПользователя", "Фоновый");
		Иначе
			Результат.Вставить("ИмяПользователя", ИмяПользователяСтрока);	
		КонецЕсли
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 start
Функция ПолучитьСохраненныеДанные(_ИмяПользователя = Неопределено) Экспорт
	ПараметрыОбработки = ПараметрыОбработки(_ИмяПользователя);
	УстановитьПривилегированныйРежим(Истина);
	РезультатНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ПараметрыОбработки.КлючОбъекта, ПараметрыОбработки.КлючНастроек,,,ПараметрыОбработки.ИмяПользователя);
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатНастроек;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 start
Процедура ВыполнитьЧтениеСохраненныхДанных(Форма, ЭтоОбычнаяФорма = Ложь) Экспорт
	РезультатНастроек = ПолучитьСохраненныеДанные("Фоновый");	
	ВыполнитьЗаполнениеОбъекта(Форма, РезультатНастроек, ЭтоОбычнаяФорма);	
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-07-2025 19:30 start
Процедура ВыполнитьЗаполнениеОбъекта(Форма, РезультатНастроек, ЭтоОбычнаяФорма)
	Если РезультатНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для каждого СамРеквизит из РезультатНастроек Цикл
		Если Не ЭтоОбычнаяФорма Тогда
			Если Не ЕстьСвойствоОбъекта(Форма, СамРеквизит.Ключ) Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли;
		Если СамРеквизит.Ключ = "Объект" Тогда
			Если ЭтоОбычнаяФорма Тогда
				ВыполнитьЗаполнениеОбъекта(Форма, СамРеквизит.Значение, ЭтоОбычнаяФорма);
			Иначе
				ВыполнитьЗаполнениеОбъекта(Форма.Объект, СамРеквизит.Значение, ЭтоОбычнаяФорма);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СамРеквизит.Значение) = Тип("ТаблицаЗначений")
			ИЛИ ТипЗнч(Форма[СамРеквизит.Ключ]) = Тип("ДанныеФормыКоллекция") Тогда
			Форма[СамРеквизит.Ключ].Загрузить(СамРеквизит.Значение);
		ИначеЕсли  ТипЗнч(СамРеквизит.Значение) = Тип("СписокЗначений") Тогда
		    Форма[СамРеквизит.Ключ].Очистить();
			Для каждого Данные из СамРеквизит.Значение Цикл
				Форма[СамРеквизит.Ключ].Добавить(Данные.Значение, Данные.Представление);
			КонецЦикла;
		Иначе
			Форма[СамРеквизит.Ключ] = СамРеквизит.Значение;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-07-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 19:30 start
Функция ЕстьСвойствоОбъекта(Объект, ИмяСвойства) Экспорт
    ЕстьСвоство = Ложь;
    
    Структура = Новый Структура(ИмяСвойства, Неопределено);
    
    ЗаполнитьЗначенияСвойств(Структура, Объект);
    
    Если Структура[ИмяСвойства] = Неопределено Тогда
        Структура[ИмяСвойства] = Ложь;
        
        ЗаполнитьЗначенияСвойств(Структура, Объект);
        
        Если Структура[ИмяСвойства] <> Ложь Тогда
            ЕстьСвоство = Истина;
        КонецЕсли;
    Иначе
        ЕстьСвоство = Истина;
    КонецЕсли;
    
    Возврат ЕстьСвоство;
КонецФункции

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 08-07-2025 19:30 start
Функция ПолучитьНастройкиОбработки(НачальныеПараметры = Неопределено) Экспорт
	
	Если НачальныеПараметры = Неопределено Тогда
		Результат = Новый Структура();
	ИНаче
		Результат = НачальныеПараметры;
	КонецЕсли;
	
	СамОбъект = Новый Структура();
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
 		Если ТипЗнч(ЭтотОбъект[Реквизит.Имя]) <> Тип("ТаблицаЗначений") Тогда
			СамОбъект.Вставить(Реквизит.Имя, ЭтотОбъект[Реквизит.Имя]);
		Иначе
			СамОбъект.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя].Выгрузить());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Реквизит из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
		СамОбъект.Вставить(Реквизит.Имя,ЭтотОбъект[Реквизит.Имя].Выгрузить());
	КонецЦикла;       
	Результат.Вставить("Объект", СамОбъект);
	
	Возврат Результат;
	
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 17-08-2023 19:30 end

Функция ПараметрыВыполненияВФоне(Знач ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = ОбщиеПараметрыВыполненияВФоне();
	ДобавитьПараметрыВыполненияДляВозвратаРезультата(Результат, ИдентификаторФормы);
	Результат.Вставить("ДополнительныйРезультат", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ОбщиеПараметрыВыполненияВФоне()
	
	Результат = Новый Структура;
	Результат.Вставить("ОжидатьЗавершение", ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 0.8));
	Результат.Вставить("НаименованиеФоновогоЗадания", "");
	Результат.Вставить("КлючФоновогоЗадания", "");
	Результат.Вставить("ЗапуститьНеВФоне", Ложь);
	Результат.Вставить("ЗапуститьВФоне", Ложь);
	Результат.Вставить("БезРасширений", Ложь);
	Результат.Вставить("СРасширениямиБазыДанных", Ложь);
	Результат.Вставить("ПрерватьВыполнениеЕслиОшибка", Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрыВыполненияДляВозвратаРезультата(Параметры, ИдентификаторФормы)
	
	Параметры.Вставить("ИдентификаторФормы", ИдентификаторФормы); 
	Параметры.Вставить("АдресРезультата", Неопределено);
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если СтрДлина(Разделитель) = 1 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, Разделитель, Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 24-03-2024 19:30 start
Процедура ОтправитьЖурналРегистрацииВClickHouse(Параметры) Экспорт
	УИД = Новый УникальныйИдентификатор;                                                      
	АдресВХ = ПоместитьВоВременноеХранилище(Неопределено, УИД);
	//ОтборЖурналаРегистрации = Новый Структура("ДатаНачала, ДатаОкончания, Метаданные");
	ОтборЖурналаРегистрации = Новый Структура("ДатаНачала, ДатаОкончания");
	    
	ОтборЖурналаРегистрации.ДатаНачала = Параметры.ДатаНачала;
	ОтборЖурналаРегистрации.ДатаОкончания = КонецДня(Параметры.ДатаОкончания);
	//ОтборЖурналаРегистрации.Метаданные = "HTTPСервис.ИмяСервиса";
	    
	
	//ОтборЖурналаРегистрации.Вставить("Уровень");
	//ОтборЖурналаРегистрации.Уровень = УровеньЖурналаРегистрации[УровеньЖурнала];
	
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ОтборЖурналаРегистрации",			ОтборЖурналаРегистрации);
	ПараметрыОтчета.Вставить("КоличествоПоказываемыхСобытий",	1000);    
	ПараметрыОтчета.Вставить("УникальныйИдентификатор",			УИД);
	ПараметрыОтчета.Вставить("МенеджерВладельца",				Обработки.ЖурналРегистрации);
	ПараметрыОтчета.Вставить("ДобавлятьДополнительныеКолонки",	Ложь);
	ПараметрыОтчета.Вставить("Журнал",							"");
	
	ЖурналРегистрации.ПрочитатьСобытияЖурналаРегистрации(ПараметрыОтчета, АдресВХ);
	    
	СтруктураЗаписейЖурнала = ПолучитьИЗВременногоХранилища(АдресВХ);
	    
	СобытияЖурнала = СтруктураЗаписейЖурнала.СобытияЖурнала;
	//
	Параметры.Вставить("ИмяТаблицы", "ЖурналРегистрации");
	Параметры.Вставить("ИмяТаблицыТранслит", Транслит(Параметры.ИмяТаблицы));
	Параметры.Вставить("ИспользоватьПериодВКлюче", Истина);
	//
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИспользоватьПериодВКлюче", Истина);
	ДополнительныеПараметры.Вставить("ИспользоватьДополнительныеКлючи", Параметры.ИспользоватьДополнительныеКлючи);
	ДополнительныеПараметры.Вставить("ИспользоватьТолькоДополнительныеКлючи", Параметры.ИспользоватьТолькоДополнительныеКлючи);
	ДополнительныеПараметры.Вставить("КоличествоВПортиции", 1000);
	ДополнительныеПараметры.Вставить("ОднимФайлом", Истина);
	ДополнительныеПараметры.Вставить("КаждаяПортицияВСвоемФоне", Ложь);
	ДополнительныеПараметры.Вставить("ПроверитьТаблицу", Ложь);
	ДополнительныеПараметры.Вставить("СоздаватьНесуществующиеПоляВБД", Ложь);
	ДополнительныеПараметры.Вставить("Периодичность", "День");
	ДополнительныеПараметры.Вставить("ТипБазы", Параметры.ТипБазы);
	
	//	
	Запрос = Неопределено;
	Параметры = Параметры;
	ПериодДата = Параметры.ДатаНачала;
	ПоляНабораДанных = СобытияЖурнала.Колонки;
	МассивПолей = ВернутьМассивПорядокПериодИзРезультатаЗапроса(СобытияЖурнала, ДополнительныеПараметры, "Имя");
	//ДополнительныеПараметры = Неопределено;
	ВходнаяТЗ = СобытияЖурнала;
	МассивПолейЗапрос = ВернутьМассивПорядокПериодИзРезультатаЗапроса(СобытияЖурнала, ДополнительныеПараметры, "Имя");
	ИндексацияТЗ = Неопределено;
	ЕстьРазница = Неопределено;
	ПараметрыМакета = Неопределено;
	МассивПолей = ВернутьМассивПорядокПериодИзНабораДанных(СобытияЖурнала.Колонки, ДополнительныеПараметры, "Имя");		  
	МассивПолейКлючейПериод = ВернутьМассивПолейКлючейПериодИзНабораДанных(СобытияЖурнала.Колонки, ДополнительныеПараметры, "Имя");
	//
	Если Не ЕстьТаблицаВ(Параметры.ИмяТаблицы, Параметры) Тогда
		ТекстЗапроса = ТекстЗапросаСозданиеТаблицыПериодСхемаКомпоновкиДанных(Параметры, ПараметрыМакета, ПоляНабораДанных, МассивПолейКлючейПериод, ДополнительныеПараметры, "Имя");
		ТаблицаСоздана = ВыполнитьЗапросPOST(ТекстЗапроса, Параметры);
	КонецЕсли;
	//
	ОписаниеТаблицыБД = ОписаниеТаблицыВ(Параметры.ИмяТаблицы, Параметры);	
	Параметры.Вставить("ОписаниеТаблицыБД", ОписаниеТаблицыБД);
	
	ПараметрыЗапроса = Новый Структура("Запрос, ПараметрыМакета, ПоляНабораДанных, МассивПолей, МассивПолейКлючейПериод, ДополнительныеПараметры", "", ПараметрыМакета, ПоляНабораДанных, МассивПолей, МассивПолейКлючейПериод, ДополнительныеПараметры);
	
	ЗаписатьРезультатЗапросаЭкстракторНаСервере(
		Запрос, 
		Параметры,
		ПараметрыЗапроса,
		ПериодДата, 
		ПоляНабораДанных, 
		МассивПолей, 
		ДополнительныеПараметры, 
		ВходнаяТЗ, 
		МассивПолейЗапрос,
		ИндексацияТЗ,
		ЕстьРазница);
	
	//ОчиститьЖурналРегистрации(ПараметрыОтчета);	
		
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 24-03-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 25-03-2024 19:30 start
Процедура ВыполнитьЗадание() Экспорт
	ПараметрыСохраненные = ПолучитьСохраненныеДанные("Фоновый").Объект;
	Если ПараметрыСохраненные.КомандыФоновые.Количество() <= 0 Тогда
		ВыполнитьКомандуСервер("Синхронизация1C_ClickHouseНаСервере_ФоноваяПоУмолчанию");
	Иначе
		ВыполнитьКомандуСервер("Синхронизация1C_ClickHouseНаСервере_ФоноваяПоУмолчанию");
		Для каждого СтрокаТЧ из ПараметрыСохраненные.КомандыФоновые Цикл
			ВыполнитьКомандуСервер(СтрокаТЧ.Команда);	
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 25-03-2024 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивТиповПриемника() Экспорт
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("ClickHouseDB");
	МассивТипов.Добавить("PostgreSQL");
	МассивТипов.Добавить("MySQL");
	МассивТипов.Добавить("REST");
	МассивТипов.Добавить("Local");
	МассивТипов.Добавить("Google Sheets");
	Возврат МассивТипов;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end
	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипу(ТипПриемника = "") Экспорт
	Если ТипПриемника = "ClickHouseDB" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуClickHouseDB();
	ИначеЕсли ТипПриемника = "PostgreSQL" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуPostgreSQL();
	ИначеЕсли ТипПриемника = "MySQL" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуMySQL();
	ИначеЕсли ТипПриемника = "REST" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуREST();
	ИначеЕсли ТипПриемника = "Local" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуLocal();
	ИначеЕсли ТипПриемника = "Google Sheets" Тогда
		Возврат ПолучитьМассивФорматовДанныхПоТипуGoogleSheets();
	Иначе
		Возврат ПолучитьМассивФорматовДанныхПоТипуSQL();
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуSQL()
	МассивРезультат = Новый Массив;
	МассивРезультат.Добавить("SQL");
	Возврат МассивРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуClickHouseDB()
	Возврат ПолучитьМассивФорматовДанныхПоТипуSQL();
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуMySQL()
	Возврат ПолучитьМассивФорматовДанныхПоТипуSQL();
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуPostgreSQL()
	Возврат ПолучитьМассивФорматовДанныхПоТипуSQL();
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуREST()
	МассивРезультат = Новый Массив;
	//МассивРезультат.Добавить("SQL");
	МассивРезультат.Добавить("CSV");
	МассивРезультат.Добавить("CSV_WH");
	МассивРезультат.Добавить("JSON");
	//МассивРезультат.Добавить("XML");
	МассивРезультат.Добавить("ClickHouseDB");
	МассивРезультат.Добавить("PostgreSQL");
	МассивРезультат.Добавить("MySQL");
	Возврат МассивРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 05-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуLocal()
	МассивРезультат = Новый Массив;
	МассивРезультат.Добавить("CSV");
	МассивРезультат.Добавить("CSV_WH");
	МассивРезультат.Добавить("JSON");
	//МассивРезультат.Добавить("XML");
	МассивРезультат.Добавить("XLS");
	МассивРезультат.Добавить("XLSX");
	Возврат МассивРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 19:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 19:30 start
Функция ПолучитьМассивФорматовДанныхПоТипуGoogleSheets()
	МассивРезультат = Новый Массив;
	МассивРезультат.Добавить("JSON");
	Возврат МассивРезультат;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 26-08-2025 19:30 end
	
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 start
Функция ВернутьПроверкуИндексаЦикла(_Индекс, _Количество)
	Если _Индекс > _Количество Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 start
Функция ВернутьСлучайноеЧисло(_ЧислоМин, _ЧислоМакс)
	Генератор = Новый ГенераторСлучайныхЧисел();
	Возврат Генератор.СлучайноеЧисло(_ЧислоМин, _ЧислоМакс);
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 start
Функция ПолучитьКоличествоЦикловЗапрос()
	_Переменная = 1+1+1+3+2+2+2+5+6+1;
	Возврат ВернутьСлучайноеЧисло(_Переменная - 1 - 1, _Переменная);
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 end

//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 start
Функция ПолучитьКоличествоЦикловДней() 
	_Переменная = 1 + 1 + 1 + 2;
	Возврат ВернутьСлучайноеЧисло(_Переменная - 1, _Переменная);
КонецФункции
//<<%%>> ilya@kimkarus.ru @kimkarus_service_bot kimkarus.ru # Ilya Kosarev 18-08-2025 9:30 end