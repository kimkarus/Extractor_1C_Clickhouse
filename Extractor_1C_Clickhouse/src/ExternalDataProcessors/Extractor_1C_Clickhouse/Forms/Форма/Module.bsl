&НаСервере
Процедура ПолучитьПоляЗапросаНаСервере(СтруктураПараметрыФормы)
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ПараметрыОбработки = ПолучитьИЗаполнитьПараметрыОбработки(СтруктураПараметрыФормы); 
	ПараметрыЗапроса = ОбработкаОбъект.ПолучитьСтруктуруПараметровЗапроса(ПараметрыОбработки);
	Для каждого СтрокаП из ПараметрыЗапроса.ПоляНабораДанных Цикл
		НоваяСтрока = Объект.ТаблицаДополнительныеКлючи.Добавить();
		НоваяСтрока.ИмяКолонки = СтрокаП.Поле;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПоляЗапроса(Команда)
	Объект.ТаблицаДополнительныеКлючи.Очистить();
	ПолучитьПоляЗапросаНаСервере(ЗаполнитьСтруктуруПараметровИзФормыПоЗапросу(Объект.ТекстЗапроса));
КонецПроцедуры

&НаКлиенте
Процедура ЭтоЗащищенноеСоединениеПриИзменении(Элемент)
	ТипБазыПриИзмененииНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиОбработкиИзФайла(Команда)
	Если ЗначениеЗаполнено(ПутьКФайлуНастройки) Тогда
		Данные = Новый ДвоичныеДанные(ПутьКФайлуНастройки);
		ЗагрузитьНастройкиОбработкиИзФайлаНаСервере(Неопределено, Данные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНастройкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Фильтр = "*";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьКФайлуНастройки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОбработкиВФайл(Команда)
	Если ЗначениеЗаполнено(ПутьКФайлуНастройки) Тогда
		АдресВХ = СохранитьНастройкиОбработкиВФайлНаСервере(ПутьКФайлуНастройки);
		//
		ДанныйФайлНастройки = ПолучитьИзВременногоХранилища(АдресВХ);
		Если ДанныйФайлНастройки <> Неопределено Тогда
			ДанныйФайлНастройки.Записать(ПутьКФайлуНастройки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СохранитьНастройкиОбработкиВФайлНаСервере(ИмяФайла)
	АбсолютныйПуть = КаталогВременныхФайлов() + "Extractor_1C_Clickhouse_config.json";
	ВыполнитьСериализациюНастройкиОбработкиНаСервере(АбсолютныйПуть);
	Данные = Новый ДвоичныеДанные(АбсолютныйПуть);
	АдресВХ = ПоместитьВоВременноеХранилище(Данные);
	Возврат АдресВХ;
КонецФункции

&НаСервере
Процедура ВыполнитьСериализациюНастройкиОбработкиНаСервере(АбсолютныйПуть)
	ЗаписиJSON = Новый ЗаписьJSON;
	ЗаписиJSON.УстановитьСтроку();
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	ЗаписиJSON.ОткрытьФайл(АбсолютныйПуть,,, ПараметрыЗаписиJSON);
	НастройкиJSON = Новый НастройкиСериализацииJSON;
	НастройкиJSON.ВариантЗаписиДаты  = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиJSON.ФорматСериализацииДаты  = ФорматДатыJSON.ISO;
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	СтруктураОбъекта = ПолучитьСтруктуруОбъекта(ОбработкаОбъект);
	ЗаписатьJSON(ЗаписиJSON, СтруктураОбъекта, НастройкиJSON);
	ЗаписиJSON.Закрыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъекта(Знач Объект)
	СтруктураОбъекта = Новый Структура; 
	СоответствениеОбъекта = Новый Соответствие;   

	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		Если ТипЗнч(Объект[Реквизит.Имя]) = тип("Число") 
		Или ТипЗнч(Объект[Реквизит.Имя]) = тип("Дата") 
		Или ТипЗнч(Объект[Реквизит.Имя]) = тип("Булево") Тогда
			СтруктураОбъекта.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
		Иначе
			СтруктураОбъекта.Вставить(Реквизит.Имя, Строка(Объект[Реквизит.Имя]));
		КонецЕсли;

	КонецЦикла;

	Для Каждого ТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		ТЗ = Объект[ТабличнаяЧасть.Имя].Выгрузить();
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			МассивМ =  ТЗ.ВыгрузитьКолонку(Колонка.Имя);
			МассивВстроку = Новый Массив;
			//
			Для Каждого СтрокаМ Из МассивМ Цикл
				Если ТипЗнч(СтрокаМ) = тип("Число") 
				Или ТипЗнч(СтрокаМ) = тип("Дата") 
				Или ТипЗнч(СтрокаМ) = тип("Булево") Тогда
					МассивВстроку.Добавить(СтрокаМ);
				Иначе
					МассивВстроку.Добавить(Строка(СтрокаМ));
				КонецЕсли;
			КонецЦикла;
			СтруктураОбъекта.Вставить(ТабличнаяЧасть.Имя + Колонка.Имя, МассивВстроку);
		КонецЦикла;
	КонецЦикла;
	Возврат СтруктураОбъекта;
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОбработкиИзФайлаНаСервере(АдресВХ = Неопределено, Данные = Неопределено)
	Если Данные = Неопределено Тогда
		Данные = ПолучитьИзВременногоХранилища(АдресВХ);		
	КонецЕсли;
	АбсолютныйПуть = КаталогВременныхФайлов() + "Extractor_1C_Clickhouse_config.json";
	Если Данные <> Неопределено Тогда
		Данные.Записать(АбсолютныйПуть);
	Иначе
		Возврат;
	КонецЕсли;
	//
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(АбсолютныйПуть);
	СтруктураСоответствийJSON = ПрочитатьJSON(ЧтениеJSON,, "ФункцияВосстановленияJSON",ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	//
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	Для Каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		Если Не СтруктураСоответствийJSON.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Объект[Реквизит.Имя]) = тип("Число") 
		Или ТипЗнч(Объект[Реквизит.Имя]) = тип("Дата") 
		Или ТипЗнч(Объект[Реквизит.Имя]) = тип("Булево") Тогда
			Объект[Реквизит.Имя] = СтруктураСоответствийJSON[Реквизит.Имя];
		Иначе
			Объект[Реквизит.Имя] = СтруктураСоответствийJSON[Реквизит.Имя];
		КонецЕсли;

	КонецЦикла;
	//
	Для Каждого ТабличнаяЧасть Из ОбработкаОбъект.Метаданные().ТабличныеЧасти Цикл
		Объект[ТабличнаяЧасть.Имя].Очистить();
		ТЗ = Объект[ТабличнаяЧасть.Имя].Выгрузить();
		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяКлюча = ТабличнаяЧасть.Имя + Колонка.Имя;
			Если Не СтруктураСоответствийJSON.Свойство(ИмяКлюча) Тогда
				Продолжить;
			КонецЕсли;
			МассивМ =  СтруктураСоответствийJSON[ИмяКлюча];
			//
			Если МассивМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//
			Если МассивМ.Количество() <= 0 Тогда
				Продолжить;
			КонецЕсли;
			//
			КоличествоСтрокТЗ = Объект[ТабличнаяЧасть.Имя].Количество();
			Счетчик = 0;
			//
			Для Каждого СтрокаМ Из МассивМ Цикл
				Если КоличествоСтрокТЗ <= 0 Тогда
					СтрокаТЧ = Объект[ТабличнаяЧасть.Имя].Добавить();
				Иначе
					СтрокаТЧ = Объект[ТабличнаяЧасть.Имя][Счетчик];
				КонецЕсли;
				//
				Если Колонка.Имя = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
				//		
				Если ТипЗнч(СтрокаМ) = тип("Число") 
				Или ТипЗнч(СтрокаМ) = тип("Дата") 
				Или ТипЗнч(СтрокаМ) = тип("Булево") Тогда
					СтрокаТЧ[Колонка.Имя] = МассивМ[Счетчик];
				Иначе
					СтрокаТЧ[Колонка.Имя] = МассивМ[Счетчик];
				КонецЕсли;
				//
				Счетчик = Счетчик + 1;
			КонецЦикла;
			//Структура.Вставить(ТабличнаяЧасть.Имя + Колонка.Имя, МассивВстроку);
		КонецЦикла;
	КонецЦикла;
	//
КонецПроцедуры

&НаСервере
Функция ФункцияВосстановленияJSON(Знач Свойство, Тип, Значение, ДополнительныеПараметры) Экспорт
	
	Возврат Значение;
КонецФункции

&НаСервере
Функция ПолучитьОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура НастройкиЗапросовПриАктивизацииСтроки(Элемент)
	Если Объект.НастройкиЗапросов.Количество() > 0 Тогда
		ТекущаяСтрока = Элементы.НастройкиЗапросов.ТекущиеДанные;
		ТекущийНомерНастройки = ТекущаяСтрока.НомерСтроки;
		ЗаполнитьЗначенияСвойств(Объект, ТекущаяСтрока);
	КонецЕсли;
	МассивДополнительныеКлючи = СтрРазделитьРасширенная(Объект.ДополнительныеКлючи, ";");
	Объект.ТаблицаДополнительныеКлючи.Очистить();
	Для каждого СтрокаМ из МассивДополнительныеКлючи Цикл
		НоваяСтрока = Объект.ТаблицаДополнительныеКлючи.Добавить();
		НоваяСтрока.ИмяКолонки = СтрокаМ;
	КонецЦикла;
	УстановитьВидимостьПолей();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолей()
	УстановитьВидимостьПолейНаСервере();
КонецПроцедуры

Процедура УстановитьВидимостьПолейНаСервере()
	ЭтотОбъект.Элементы.СтраницаЖурналРегистрации.Видимость = Ложь;
	ЭтотОбъект.Элементы.СтраницаКнопкаПример.Видимость = Ложь;
	Если Объект.ТипБазы = "Google Sheets" Тогда
		ЭтотОбъект.Элементы.КлючТаблицы.Видимость = Истина;
		ЭтотОбъект.Элементы.СоздаватьНесуществующиеПоляВБД.Видимость = Ложь;
		ЭтотОбъект.Элементы.СпособОбновления.Видимость = Истина;
		ЭтотОбъект.Элементы.НастройкиGoogleSheets.Видимость = Истина;
		ЭтотОбъект.Элементы.НастройкиБазыАдресПорт.Видимость = Ложь;
		ЭтотОбъект.Элементы.НастройкиБазыЛогинПароль.Видимость = Ложь;
		ЭтотОбъект.Элементы.ПутьДоСертификата.Видимость = Ложь;
		ЭтотОбъект.Элементы.ВключитьПараметрыЗапросаREST.Видимость = Ложь;
	Иначе
		ЭтотОбъект.Элементы.КлючТаблицы.Видимость = Ложь;
		ЭтотОбъект.Элементы.СоздаватьНесуществующиеПоляВБД.Видимость = Истина;
		ЭтотОбъект.Элементы.СпособОбновления.Видимость = Ложь;
		ЭтотОбъект.Элементы.НастройкиGoogleSheets.Видимость = Ложь;
		ЭтотОбъект.Элементы.НастройкиБазыАдресПорт.Видимость = Истина;
		ЭтотОбъект.Элементы.НастройкиБазыЛогинПароль.Видимость = Истина;
		ЭтотОбъект.Элементы.ПутьДоСертификата.Видимость = Истина;
		ЭтотОбъект.Элементы.ВключитьПараметрыЗапросаREST.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипБазыПриИзменении(Элемент)
	ТипБазыПриИзмененииНаКлиенте();
	УстановитьВидимостьПолей();
КонецПроцедуры

&НаКлиенте
Процедура ТипБазыПриИзмененииНаКлиенте()
	Если Объект.ТипБазы = "ClickHouseDB" Тогда
		Если Объект.ЭтоЗащищенноеСоединение Тогда
			Объект.Порт = 8443;
		Иначе	
			Объект.Порт = 8123;
		КонецЕсли;
	ИначеЕсли Объект.ТипБазы = "PostgreSQL" Тогда
		Если Объект.ЭтоЗащищенноеСоединение Тогда
			Объект.Порт = 5433;
		Иначе	
			Объект.Порт = 5432;
		КонецЕсли;
	ИначеЕсли Объект.ТипБазы = "MySQL" Тогда
		Объект.Порт = 3306;
	ИначеЕсли Объект.ТипБазы = "REST" Тогда
		Если Объект.ЭтоЗащищенноеСоединение Тогда
			Объект.Порт = 443;
		Иначе	
			Объект.Порт = 80;
		КонецЕсли;
	ИначеЕсли Объект.ТипБазы = "Local" Тогда
		//
	ИначеЕсли Объект.ТипБазы = "Google Sheets" Тогда
		Объект.Порт = 443;
	Иначе
		Объект.Порт = 8123;
	КонецЕсли;
	ЗаполнитьСписокФорматовДанныхПоТипуПриемника();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФорматовДанныхПоТипуПриемника()
	Элементы.ФорматДанных.СписокВыбора.Очистить();
	МассивФорматов = ПолучитьСписокФорматовДанныхПоТипуПриемника(Объект.ТипБазы);
	//
	Для каждого СтрокаМ из МассивФорматов Цикл
		Элементы.ФорматДанных.СписокВыбора.Добавить(СтрокаМ);
	КонецЦикла;
	Если МассивФорматов.Количество() > 0 Тогда
		Объект.ФорматДанных = МассивФорматов[0];
	Иначе
		Объект.ФорматДанных = "SQL";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокФорматовДанныхПоТипуПриемника(ТипПриемника)
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	Возврат ОбработкаОбъект.ПолучитьМассивФорматовДанныхПоТипу(ТипПриемника);
КонецФункции

&НаСервере
Процедура ОтправитьЖурналРегистрацииВБДНаСервере(СтруктураПараметрыФормы)
	ПараметрыОбработки = ПолучитьИЗаполнитьПараметрыОбработки(СтруктураПараметрыФормы);
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ОбработкаОбъект.ОтправитьЖурналРегистрацииВClickHouse(ПараметрыОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЖурналРегистрацииВClickHouse(Команда)
	ОтправитьЖурналРегистрацииВБДНаСервере(ЗаполнитьСтруктуруПараметровИзФормы("КомандаПример"));
КонецПроцедуры

&НаСервере
Функция ПолучитьИЗаполнитьПараметрыОбработки(СтруктураПараметрыФормы)
	ПараметрыОбработки = ПолучитьСтруктуруПараметров();
	
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	МДОбъекта = ОбработкаОбъект.Метаданные();
	Для Каждого ТекРеквизит Из МДОбъекта.Реквизиты Цикл
		ПараметрыОбработки.Вставить(ТекРеквизит.Имя, ОбработкаОбъект[ТекРеквизит.Имя]);
	КонецЦикла;
	//
	Для каждого Элемент из СтруктураПараметрыФормы Цикл
		ПараметрыОбработки.Вставить(Элемент.Ключ, Элемент.Значение);	
	КонецЦикла;
	//
	ПараметрыОбработки.Вставить("ДатаНачала", Объект.ДатаНачала);
	ПараметрыОбработки.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	//
	Возврат ПараметрыОбработки;
КонецФункции

&НаСервере
Процедура ВыполнитьВыгрузкуДанныхВБДНаСервере(СтруктураПараметрыФормы)
	ПараметрыОбработки = ПолучитьИЗаполнитьПараметрыОбработки(СтруктураПараметрыФормы);
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ОбработкаОбъект.ВыгрузитьДанныеВПриемникНаСервере(ПараметрыОбработки);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ИмяКоманды)
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ОбработкаОбъект.ВыполнитьКомандуСервер(ИмяКоманды);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметров()
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	Возврат ОбработкаОбъект.ЗаполнитьПараметры();
КонецФункции

&НаСервере
Процедура ПриОткрытииНаСервере()
	ВыполнитьЧтениеСохраненныхДанныхНаСервере();
	УстановитьВидимостьПолейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЧтениеСохраненныхДанныхНаСервере()
	Объект.ИмяПользователя = "Фоновый";
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ОбработкаОбъект.ВыполнитьЧтениеСохраненныхДанных(ЭтаФорма);
	Если Объект.КоличествоДнейНазад <= 0 Тогда
		Объект.КоличествоДнейНазад = 1;
	КонецЕсли;
	Если Объект.КоличествоВПортиции <= 0 Тогда
		Объект.КоличествоВПортиции = 1000;
	КонецЕсли;
	Если Объект.Периодичность = ""
		ИЛИ Не ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Объект.Периодичность = "День";
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущаяДата = ТекущаяДата();
	ПриОткрытииНаСервере();
	Период.ДатаНачала = НачалоДня(ТекущаяДата);
	Период.ДатаОкончания = КонецДня(ТекущаяДата);
	//
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	//
	ТекущийНомерНастройки = 1;
	//
	Если Объект.НастройкиЗапросов.Количество() > 0 Тогда
		ТекущаяСтрока = Объект.НастройкиЗапросов[ТекущийНомерНастройки - 1];
		ЗаполнитьЗначенияСвойств(Объект, ТекущаяСтрока);
	Иначе
		СтрокаТЧ = Объект.НастройкиЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Объект);
	КонецЕсли;
	Объект.ТаблицаДополнительныеКлючи.Очистить();
	ЗаполнитьСписокТиповПриемника();
	ЗаполнитьСписокФорматовДанныхПоТипуПриемника();
	ЗаполнитьСписокПериодичности();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокТиповПриемника()
	МассивТипов = ПолучитьМассивТиповПриемника();
	Элементы.ТипБазы.СписокВыбора.Очистить();
	//
	Для каждого СтрокаМ из МассивТипов Цикл
		Элементы.ТипБазы.СписокВыбора.Добавить(СтрокаМ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивТиповПриемника()
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	Возврат ОбработкаОбъект.ПолучитьМассивТиповПриемника();
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокПериодичности()
	МассивРезультат = ПолучитьМассивПериодичностиНаСервере();
	Элементы.Периодичность.СписокВыбора.Очистить();
	//
	Для каждого СтрокаМ из МассивРезультат Цикл
		Элементы.Периодичность.СписокВыбора.Добавить(СтрокаМ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПериодичностиНаСервере()
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	Возврат ОбработкаОбъект.ПолучитьМассивПериодичности();
КонецФункции

&НаКлиенте
Процедура КомандаПример(Команда)
	ВыполнитьВыгрузкуДанныхВБДНаСервере(ЗаполнитьСтруктуруПараметровИзФормы("КомандаПример"));
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруПараметровИзФормы(ИмяТаблицы = "", ИмяПользователя = "")
	СтруктураПараметрыФормы = Новый Структура;
	СтруктураПараметрыФормы.Вставить("ИмяТаблицы", ИмяТаблицы);	
	СтруктураПараметрыФормы.Вставить("ИмяПользователя", ИмяПользователя);
	СтруктураПараметрыФормы.Вставить("ДатаНачала", Период.ДатаНачала);
	СтруктураПараметрыФормы.Вставить("ДатаОкончания", Период.ДатаОкончания);
	СтруктураПараметрыФормы.Вставить("ПроверитьТаблицу", Объект.ПроверитьТаблицу);
	
	Возврат СтруктураПараметрыФормы;
КонецФункции

&НаКлиенте
Функция ЗаполнитьСтруктуруПараметровИзФормыПоЗапросу(ПараметрТекстЗапроса)
	СтруктураПараметрыФормы = Новый Структура;
	СтруктураПараметрыФормы.Вставить("ИмяТаблицы", ?(ЗначениеЗаполнено(Объект.ИмяТаблицы), Объект.ИмяТаблицы, "ТекстЗапроса"));	
	СтруктураПараметрыФормы.Вставить("ДатаНачала", Период.ДатаНачала);
	СтруктураПараметрыФормы.Вставить("ДатаОкончания", Период.ДатаОкончания);
	СтруктураПараметрыФормы.Вставить("ПроверитьТаблицу", Объект.ПроверитьТаблицу);
	СтруктураПараметрыФормы.Вставить("ТекстЗапроса", ПараметрТекстЗапроса);
	СтруктураПараметрыФормы.Вставить("ЭтоПоЗапросу", Истина);
	
	Возврат СтруктураПараметрыФормы;
КонецФункции

&НаКлиенте
Процедура Конструктор(Команда)

    Конструктор = Новый КонструкторЗапроса;
    Конструктор.Текст = Объект.ТекстЗапроса;
    Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторЗапросаЗавершение", ЭтотОбъект);
    Конструктор.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапросаЗавершение(Текст, ДополнительныеПараметры) Экспорт

    Если НЕ Текст = Неопределено Тогда
    	Объект.ТекстЗапроса = Текст;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапрос(Команда)

  ВыполнитьВыгрузкуДанныхВБДНаСервере(ЗаполнитьСтруктуруПараметровИзФормыПоЗапросу(Объект.ТекстЗапроса));  

КонецПроцедуры

&НаСервере
Функция ПолучитьНачальныеПараметрыФормы()
	
	//Результат = Новый Структура();
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПреобразоватьТЗВСтроки();
	СохранитьНастройкиДляФонаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	Если Не Объект.ЭтоТекущаяДата Тогда
		Объект.КоличествоДнейНазад = ((НачалоДня(Объект.ДатаОкончания) - НачалоДня(Объект.ДатаНачала)) / (60 * 60 * 24)) + 1;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДляФонаНаСервере()
	Объект.ИмяПользователя = "Фоновый";
	ОбработкаОбъект = ПолучитьОбъектОбработки();
	ПараметрыОбработки = ОбработкаОбъект.ПараметрыОбработки(Объект.ИмяПользователя);
	НачальныеПараметры = ПолучитьНачальныеПараметрыФормы();
	НастройкиОбработки = ОбработкаОбъект.ПолучитьНастройкиОбработки(НачальныеПараметры);
	ОбработкаОбъект.СохранитьПараметрыОбработки(ПараметрыОбработки, НастройкиОбработки);
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьТЗВСтроки()
	Если Объект.ТаблицаДополнительныеКлючи.Количество() > 0 Тогда
		Объект.ДополнительныеКлючи = "";
		Для каждого СтрокаТЗ из Объект.ТаблицаДополнительныеКлючи Цикл
			Объект.ДополнительныеКлючи = Объект.ДополнительныеКлючи + СтрокаТЗ.ИмяКолонки + ";"; 	
		КонецЦикла;
	КонецЕсли;
	//
	Если Объект.НастройкиЗапросов.Количество() <= 0 Тогда
		СтрокаТЧ = Объект.НастройкиЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(Объект, СтрокаТЧ);
	Иначе
		Если ЭтотОбъект.ТекущийЭлемент = Элементы.СтраницаТаблицаНастройкиЗапросов Тогда
		Иначе
			ТекущаяСтрока = Объект.НастройкиЗапросов[ТекущийНомерНастройки - 1];
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиДляФона(Команда)
	ПреобразоватьТЗВСтроки();
	СохранитьНастройкиДляФонаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиДляФонаНаСервере()
	ВыполнитьЧтениеСохраненныхДанныхНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиДляФона(Команда)
	ПолучитьНастройкиДляФонаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФоновоеЗадание(Команда)
	Объект.ИмяПользователя = "Фоновый";
	ВыполнитьВыгрузкуДанныхВБДНаСервере(ЗаполнитьСтруктуруПараметровИзФормы("ФоноваяПоУмолчанию"));
КонецПроцедуры

&НаСервере
Процедура ВыручкаИСебестоимостьПродажПриходДСНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаИСебестоимостьПродажПриходДС(Команда)
	ВыполнитьВыгрузкуДанныхВБДНаСервере(ЗаполнитьСтруктуруПараметровИзФормы("ВыручкаИСебестоимостьПродажПриходДС", "Форма"));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьФоновоеЗаданиеКоманда1(Команда)
	ВыполнитьКомандуНаСервере("Синхронизация1C_НастройкаЗапроса_1");
КонецПроцедуры

//
Функция СтрРазделитьРасширенная(Строка, Разделитель = ",", ВключатьПустые = Ложь,
	СокращатьНепечатаемыеСимволы = Ложь, РазделительЕдинойСтрокой = Истина) Экспорт

	Если РазделительЕдинойСтрокой И СтрДлина(Разделитель) > 0 Тогда

		Результат = РазложитьСтрокуВМассивПодстрок(
		Строка, Разделитель, НЕ ВключатьПустые, СокращатьНепечатаемыеСимволы);

	Иначе

		Результат = СтрРазделить(Строка, Разделитель, ВключатьПустые);
		Если СокращатьНепечатаемыеСимволы Тогда
			Для Индекс = 0 По Результат.Количество()-1 Цикл
				Результат[Индекс] = СокрЛП(Результат[Индекс]);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;        

	Возврат Результат;

КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Если СтрДлина(Разделитель) = 1 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, Разделитель, Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
